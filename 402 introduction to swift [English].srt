1
00:00:11,091 --> 00:00:16,117
hello welcome thanks for joining us for
an introduction to switch

2
00:00:17,017 --> 00:00:21,060
kid on a share with you a little a
little back

3
00:00:21,006 --> 00:00:24,075
so im out swift yesterday the keynote
and

4
00:00:25,029 --> 00:00:28,043
as part of the announcement made
available to you

5
00:00:28,043 --> 00:00:31,097
this document its but with programming
language

6
00:00:31,097 --> 00:00:34,141
it's a guide and reference to the
language and in bed when the doc you

7
00:00:35,041 --> 00:00:36,136
online but also in the iBookstore

8
00:00:37,036 --> 00:00:40,235
something really remarkable happened

9
00:00:40,559 --> 00:00:44,180
from the time we made available
yesterday

10
00:00:44,018 --> 00:00:49,083
we've had 370,000 download

11
00:00:49,083 --> 00:00:54,087
say yes thank you anyway this is an
introduction to Swift

12
00:00:55,023 --> 00:01:01,045
I am to my fed Island by day buddy this
is the first three talks on those with

13
00:01:01,045 --> 00:01:01,110
language

14
00:01:02,001 --> 00:01:05,027
this at the conference and we're
focusing today on a broad overview

15
00:01:05,036 --> 00:01:08,107
but the language giving you as much as
we can a few little pieces or some other

16
00:01:09,007 --> 00:01:10,036
more advanced features

17
00:01:10,036 --> 00:01:13,078
before we get started let's go back in
time and it away

18
00:01:13,078 --> 00:01:16,134
many many decades ago

19
00:01:17,034 --> 00:01:21,673
this program appeared in the printed
hello world for the first time

20
00:01:21,979 --> 00:01:25,680
it is a course introduction to came out
pending an image you see book

21
00:01:25,068 --> 00:01:29,161
but many decades that's quite a long
time in CPI terms

22
00:01:30,061 --> 00:01:35,062
so what's changed in that time call

23
00:01:35,071 --> 00:01:39,108
it becomes much shorter inspect yes

24
00:01:40,008 --> 00:01:44,039
thank you so what will happen in this
fight but we've got rid

25
00:01:44,039 --> 00:01:47,056
be include statements no need to bring
in the standard library should just be

26
00:01:47,056 --> 00:01:49,074
that we should just be able to find it
should just work

27
00:01:49,074 --> 00:01:52,078
remain well

28
00:01:52,078 --> 00:01:56,090
within 25 slide a single line of code
that is a complete program right there

29
00:01:56,009 --> 00:01:57,025
and do something like this

30
00:01:58,006 --> 00:02:01,014
we shouldn't need to have to specify you
know this is the entry point for their

31
00:02:01,086 --> 00:02:06,111
so we don't have to gonna call a
function not returning any random value

32
00:02:07,011 --> 00:02:07,072
anymore

33
00:02:07,072 --> 00:02:11,073
and last but not least no semi colons

34
00:02:11,082 --> 00:02:14,090
so that's how the world is a very simple
app little bit simpler than what

35
00:02:15,062 --> 00:02:19,113
we'll right day in day out so what we
gonna come today

36
00:02:20,013 --> 00:02:24,056
we're gonna focus on month in taxes in
key areas house with makes your code

37
00:02:24,056 --> 00:02:27,092
safe makes it much easier to read rights

38
00:02:27,092 --> 00:02:30,153
more concise because on a modern
features we've introduced

39
00:02:31,053 --> 00:02:35,059
and consistency between decorations and
all all this in fact that we have

40
00:02:35,059 --> 00:02:38,151
and of course house with give you extra
power

41
00:02:39,051 --> 00:02:42,128
to do things to kick us off gonna hand
over today buddy

42
00:02:43,028 --> 00:02:46,039
to take us three the basic so I want to
start with some other

43
00:02:46,039 --> 00:02:49,468
the fundamentals and thus what language
start with something really simple as

44
00:02:49,819 --> 00:02:49,900
defined about

45
00:02:50,629 --> 00:02:53,673
we do this with the bar keyword then the
name

46
00:02:54,069 --> 00:02:58,660
language name in this case ACO long and
the tight and this colon appears

47
00:02:58,066 --> 00:03:02,365
quite often switch this means is a time
so language name is a type string

48
00:03:02,959 --> 00:03:05,970
so we'll give it an initial string buddy
the stars of

49
00:03:06,069 --> 00:03:11,111
or three initial value but this one for
you might notice about this variable

50
00:03:11,489 --> 00:03:15,310
it doesn't vary so there's no real need
for this to be

51
00:03:15,031 --> 00:03:18,350
a variable instead you can find it the
constant

52
00:03:18,629 --> 00:03:22,662
with the like he would instead and if we
introduce a few more of these things

53
00:03:22,959 --> 00:03:26,480
that have the version of the language
that the double 10

54
00:03:26,048 --> 00:03:29,137
will have the year it was introduced the
challenger

55
00:03:29,569 --> 00:03:33,040
2014 and the fact that the language is
awesome

56
00:03:33,004 --> 00:03:36,093
that's a boolean clearly true well

57
00:03:36,093 --> 00:03:39,402
the new among which wasn't achieved and
the fact that it's also I'm

58
00:03:40,239 --> 00:03:45,256
these also on going to change so they
may also be constant

59
00:03:45,409 --> 00:03:48,414
and this is a general principle in sweat
that

60
00:03:48,909 --> 00:03:51,920
we prefer immutability or Constance by
default

61
00:03:51,092 --> 00:03:54,104
any really often to mutability of
variables

62
00:03:55,004 --> 00:03:58,093
weapons actually need to change this
makes your code

63
00:03:58,093 --> 00:04:02,131
safer in a a multi-threaded environment
it also means Swiss can optimize your

64
00:04:03,031 --> 00:04:05,790
code more effectively because it knows
what is going to change

65
00:04:06,069 --> 00:04:09,167
and it just generally makes you could
more readable make sure intend clearer

66
00:04:10,049 --> 00:04:14,170
you're saying what is and isn't going to
their for here

67
00:04:14,017 --> 00:04:17,056
I created a string a double an integer
in Abuja

68
00:04:17,209 --> 00:04:20,218
and it's pretty obvious from these
values on the right hand side what it is

69
00:04:20,299 --> 00:04:21,305
that I want to create

70
00:04:21,359 --> 00:04:25,870
if markets so obvious from the bodies on
the right hand side

71
00:04:25,087 --> 00:04:28,626
that there's really no point you might
in the types and swift

72
00:04:29,409 --> 00:04:33,090
in many cases you don't need to refuses
type inference

73
00:04:33,009 --> 00:04:36,045
to look at the money is on the right
hand side with the swine work at what

74
00:04:36,045 --> 00:04:37,087
point these things should be

75
00:04:37,087 --> 00:04:40,174
who this makes good faith without the
efforts this means all these constants

76
00:04:41,074 --> 00:04:42,074
and variables or

77
00:04:42,074 --> 00:04:45,533
explicitly types you don't have to write
tenneco's

78
00:04:46,199 --> 00:04:49,280
to get those times in place morphing

79
00:04:50,009 --> 00:04:53,860
on constants and variables before we
move on and that's that you can use

80
00:04:53,086 --> 00:04:57,103
pretty much any unique a charity like
your constant variable names such as

81
00:04:58,003 --> 00:04:58,085
part here

82
00:04:58,085 --> 00:05:01,149
and yes does

83
00:05:02,049 --> 00:05:05,068
including those this is the stuff that
matters seriously

84
00:05:05,068 --> 00:05:08,807
so that some other basics

85
00:05:09,419 --> 00:05:12,870
talk if you can we also have a morton
fast

86
00:05:12,087 --> 00:05:15,226
Unicode string implementation called
suitable enough string

87
00:05:16,009 --> 00:05:19,930
and them as we just saw if you're
initializing straying from string

88
00:05:19,093 --> 00:05:19,642
literal

89
00:05:20,479 --> 00:05:23,535
as we are here certain for the time for
you is clearly want this to be a

90
00:05:24,039 --> 00:05:24,102
stranger

91
00:05:24,669 --> 00:05:28,100
now swift string syntax

92
00:05:28,001 --> 00:05:33,290
is very lightweight look like a c-string
but it's as powerful as an estranged

93
00:05:33,389 --> 00:05:37,070
and indeed if you working with condition
you can use a swift string

94
00:05:37,007 --> 00:05:40,052
anywhere you would use an industry so
here with I think the

95
00:05:40,052 --> 00:05:44,149
HTTP method property event and its URL
request using a first-rate

96
00:05:45,049 --> 00:05:49,478
moreover if you working with foundation
you have the info and a string AP only

97
00:05:49,919 --> 00:05:51,000
available to you

98
00:05:51,000 --> 00:05:54,949
on any Swiss train you create so we can
call that the path components property

99
00:05:54,949 --> 00:05:55,952
on this train

100
00:05:55,979 --> 00:05:59,520
and get back in to rate the companies
they read

101
00:05:59,052 --> 00:06:02,109
for every switch string is a collection
of characters

102
00:06:03,009 --> 00:06:06,040
and you can use of or in lieu to its
rate over those characters

103
00:06:06,004 --> 00:06:09,041
so just hit with printing the five
characters in The Woodlands

104
00:06:09,077 --> 00:06:13,476
falklands this work just as well in
English

105
00:06:14,169 --> 00:06:17,180
as it does in icelandic all

106
00:06:17,018 --> 00:06:20,035
Russian all Chinese

107
00:06:20,035 --> 00:06:23,094
and even with emoji so if you want to

108
00:06:23,094 --> 00:06:26,383
create a character you can do so just by
assigning

109
00:06:27,229 --> 00:06:30,232
a character annotation mystery the
string

110
00:06:30,259 --> 00:06:34,050
literally the site with lazy want the
street we want the string literal to be

111
00:06:34,005 --> 00:06:34,714
a character

112
00:06:34,759 --> 00:06:38,210
district if you want to add together two
characters

113
00:06:38,021 --> 00:06:42,070
you can do so just with addition and
this goes for two characters make

114
00:06:42,259 --> 00:06:47,780
strain goes for Strings characters
making long distance likewise districts

115
00:06:47,078 --> 00:06:51,079
sometimes you want to make more complex
strings than just addition

116
00:06:51,088 --> 00:06:54,109
so let's say we want to take these to
Constance a

117
00:06:55,009 --> 00:07:00,043
be which are inferred to be integers
from the full bodies three in five

118
00:07:00,043 --> 00:07:03,045
and would like to make this string 3
times five

119
00:07:03,063 --> 00:07:07,068
is 15 but in a way that would work for
any values have a in the that we have

120
00:07:08,013 --> 00:07:09,862
them

121
00:07:09,979 --> 00:07:13,010
us with a really elegant way to do this
three powerful way

122
00:07:13,289 --> 00:07:17,020
writing these kinda more complex strings
known as string interpolation

123
00:07:17,002 --> 00:07:20,071
this is how it looks we can insert
Constance

124
00:07:20,071 --> 00:07:23,163
variables and even expressions such as
three times five here

125
00:07:24,063 --> 00:07:27,442
directly within a string literal just by
looking them in print sees

126
00:07:28,009 --> 00:07:31,106
escaped with a backslash and it's really
clear what the string interpolation

127
00:07:31,979 --> 00:07:35,995
will make when it's evaluate it makes
exactly this ring would expect

128
00:07:36,139 --> 00:07:40,630
and this works with any value have a be

129
00:07:40,063 --> 00:07:45,192
but you might be wondering the swift
have immutable strict or

130
00:07:45,759 --> 00:07:48,787
and the answer is actually doesn't need
wall instead

131
00:07:49,039 --> 00:07:52,220
stream usability is a case in working
with variable

132
00:07:52,022 --> 00:07:56,046
in which case the string can change such
as adding to the strain on the N

133
00:07:56,046 --> 00:07:59,072
or alternatively working with the
constant in which case

134
00:07:59,072 --> 00:08:03,078
the stream com change if actually a
compile-time error

135
00:08:03,078 --> 00:08:07,099
to try and add another string on fiscal
constraint

136
00:08:07,099 --> 00:08:11,146
about string what else do we have but we
have collection sites array

137
00:08:12,046 --> 00:08:15,074
dictionary in the same way we saw you
can use a

138
00:08:15,074 --> 00:08:18,125
switch string and and a string
interchangeably with API

139
00:08:19,025 --> 00:08:22,040
you can use and array anywhere that
takes an anniversary

140
00:08:22,004 --> 00:08:26,005
a dictionary anyway the Texan and
extinction it but earlier on when we

141
00:08:26,041 --> 00:08:29,049
called that path components property on
off switch trains

142
00:08:29,049 --> 00:08:32,128
we got back was actually right not
tonight s right

143
00:08:32,569 --> 00:08:36,654
even though the API a wrister it defines
return and it's free

144
00:08:37,419 --> 00:08:40,456
the easiest way to create a new
collection is a literal

145
00:08:40,789 --> 00:08:44,817
and array index initials and swift very
familiar from objective-c

146
00:08:45,069 --> 00:08:48,920
arrays are just square bracket from the
edge commas between the items

147
00:08:48,092 --> 00:08:52,631
here we have an array 4-string ideas for
names

148
00:08:53,459 --> 00:08:56,534
dictionary literals also very familiar
cohen's between the keys and values

149
00:08:57,209 --> 00:09:00,600
commas between the key/value pairs its
way back from the edge

150
00:09:00,006 --> 00:09:04,019
here we have peas a which is strange the
names are some animals

151
00:09:04,073 --> 00:09:08,079
and integer values the numbers are like
those have

152
00:09:09,033 --> 00:09:12,076
so the literals a very familiar but
arraigned dictionary

153
00:09:12,076 --> 00:09:15,138
actually have two things that a quite
different from an disarray

154
00:09:16,038 --> 00:09:20,092
and Ennis Texas the first that they can
work with any type

155
00:09:20,092 --> 00:09:23,123
here we have strings and integers you
know elections

156
00:09:24,023 --> 00:09:28,042
they don't have to be object they don't
have to be replaced

157
00:09:28,042 --> 00:09:31,073
second difference is it in swift
collections are

158
00:09:31,073 --> 00:09:34,100
types collections but the 1i means

159
00:09:35,000 --> 00:09:39,079
to his or a real names and is an array
for Strings

160
00:09:39,079 --> 00:09:42,081
now is pretty clear from looking at this
away in Ames

161
00:09:42,081 --> 00:09:45,174
that it would be owned to have an
integer into this right or a boolean

162
00:09:46,074 --> 00:09:46,082
value

163
00:09:47,054 --> 00:09:50,118
all a bicycle I would be just called

164
00:09:51,018 --> 00:09:55,095
an array named should always be strings
so it would be nice to have a way to say

165
00:09:55,095 --> 00:09:58,163
that it can only always be strings and
its first week at

166
00:09:59,063 --> 00:10:02,138
we can provide a 20-minute Asian this is
how we right away array of strings

167
00:10:03,038 --> 00:10:08,095
string for a bite his weapon and then we
can only considering the mystery

168
00:10:08,095 --> 00:10:11,154
from thing on the right hand side here
is pretty clear

169
00:10:12,054 --> 00:10:15,110
that we want an array of strings just
from looking at this little

170
00:10:16,001 --> 00:10:19,097
and so if we initialize an array in this
way we actually don't need to write the

171
00:10:20,006 --> 00:10:20,085
tight

172
00:10:20,085 --> 00:10:24,164
switch Confederate force and we still
end up with the time to write

173
00:10:25,064 --> 00:10:28,703
the same goes for dictionaries here it's
clear we want string

174
00:10:29,279 --> 00:10:32,320
keys and/or a integer values

175
00:10:32,032 --> 00:10:35,113
as we can for this time for us as well

176
00:10:36,013 --> 00:10:39,026
this but we have point elections

177
00:10:39,026 --> 00:10:43,074
makes good faith for two reasons firstly
it means you know what you're going to

178
00:10:43,074 --> 00:10:43,145
get back

179
00:10:44,045 --> 00:10:48,050
you know what you get out to these
collections it also means that you can

180
00:10:48,005 --> 00:10:48,102
insert the wrong

181
00:10:49,047 --> 00:10:52,666
claims about his by mistake is actually
narrative to insert the wrong kind of

182
00:10:53,089 --> 00:10:54,380
things into these rights

183
00:10:54,038 --> 00:10:58,043
and the six so having defined a
collection

184
00:10:58,088 --> 00:11:01,154
they would now be useful to to loop over
them to iterate over the values

185
00:11:02,054 --> 00:11:05,058
we have all the leaves you be familiar
with from see

186
00:11:05,094 --> 00:11:08,123
we have while loops do while it's a four
tips

187
00:11:09,023 --> 00:11:12,098
and as we saw earlier we also have the
foreign leave which we use with

188
00:11:12,098 --> 00:11:15,189
strings and characters but it's a bit
more powerful than just rings we can use

189
00:11:16,089 --> 00:11:18,348
it for a few more things than that

190
00:11:19,149 --> 00:11:22,670
we can use it with ranges this is a way
to write arranged

191
00:11:22,067 --> 00:11:25,072
that includes the numbers are both ends
it's warm talk talk talk

192
00:11:26,017 --> 00:11:31,246
fine that's known as a close-range is
includes both 15 in range

193
00:11:31,399 --> 00:11:35,455
it we just printing the first five items
in four times table

194
00:11:35,959 --> 00:11:39,450
sometimes however who wants to arrange
to start from zero

195
00:11:39,045 --> 00:11:42,054
incomes up to but not including the
funnel money we have a

196
00:11:42,054 --> 00:11:45,079
way to write that as well to seeing 2
don't threaten 3

197
00:11:45,079 --> 00:11:48,157
to this comes from zero 25 but not
including five is known as a

198
00:11:49,057 --> 00:11:54,092
hoff close range conclude about at the
beginning but not want to be a

199
00:11:54,092 --> 00:11:58,511
we can use foreign within a right sewed
for print a nice welcome to the four

200
00:11:59,339 --> 00:12:01,410
people in our names array

201
00:12:01,041 --> 00:12:04,410
and we can even use it with a dictionary
I'm new here

202
00:12:04,779 --> 00:12:07,847
that we're extracting the key and the
value at the same time

203
00:12:08,459 --> 00:12:12,464
in a single foreign Lee this makes much
more expressive code when working with

204
00:12:12,959 --> 00:12:15,240
pictures

205
00:12:15,024 --> 00:12:19,563
this combination a key in value rub
together in parentheses

206
00:12:19,779 --> 00:12:23,720
is an example of a swift feature known
as a tuple and these on tweeting the

207
00:12:23,072 --> 00:12:23,144
Values

208
00:12:24,044 --> 00:12:28,052
group together as a single compound
finally you can pass around in your car

209
00:12:29,024 --> 00:12:34,042
welcome back to couples later in the
session the sea world that can be used

210
00:12:34,042 --> 00:12:38,521
so that's how we create collections and
how its rating heavily modified

211
00:12:38,899 --> 00:12:42,850
problems but with an array he is a
shopping list contains two items

212
00:12:42,085 --> 00:12:45,098
eggs and as an objective-c

213
00:12:45,098 --> 00:12:48,124
we can access the first item in the
array just using subverting

214
00:12:49,024 --> 00:12:53,105
here retracting X if you want to add an
item to the right

215
00:12:54,005 --> 00:12:57,041
we literally just added to the right way
and it's Liam they're running if they

216
00:12:57,041 --> 00:12:58,960
don't comply

217
00:12:59,329 --> 00:13:03,910
we can also and multiple items in one go
just by adding a compatible away

218
00:13:03,091 --> 00:13:07,390
hey we're reading cheese butter and
shoppers but tallest

219
00:13:08,209 --> 00:13:11,720
to want to change a buddy subscription
again we just signed a new value

220
00:13:11,072 --> 00:13:15,135
pre-existing a right he was changing
eggs to be sick

221
00:13:16,035 --> 00:13:19,132
but if we if we want to make a shopping
list a little bit healthier perhaps

222
00:13:20,032 --> 00:13:23,041
we can actually place an entire range in
one go so we can replace

223
00:13:24,022 --> 00:13:27,085
by 2335 but the cheese the butter in the
chocolate spread

224
00:13:27,085 --> 00:13:30,514
with some bananas and apples instead
about

225
00:13:31,279 --> 00:13:35,315
but the rave about dictionaries well we
can modify his own text me from earlier

226
00:13:35,639 --> 00:13:36,480
we have three

227
00:13:36,048 --> 00:13:40,657
p-value as the animals likes and three
starts off with free but we want to add

228
00:13:41,089 --> 00:13:43,310
a new animal to this the right

229
00:13:43,031 --> 00:13:46,116
this is easy is just signing a new body
fittings a key that's not already in the

230
00:13:47,016 --> 00:13:47,025
dictionary

231
00:13:48,006 --> 00:13:52,465
here running the fact that spiders have
273 likes

232
00:13:52,519 --> 00:13:55,880
but as a problem point is do not have

233
00:13:55,088 --> 00:13:58,357
273 likes if you find one that does

234
00:13:59,149 --> 00:14:03,236
runaway although be warned it will
probably catch it

235
00:14:04,019 --> 00:14:07,120
but this is not a problem we can fix it
we can just to find

236
00:14:07,012 --> 00:14:10,025
a new family for existing key and change
the body index

237
00:14:10,025 --> 00:14:14,042
expires Nov 8 likes to have been
modified

238
00:14:14,042 --> 00:14:18,050
dictionary want want to retrieve a value
from this dictionary

239
00:14:19,022 --> 00:14:22,106
what we want to see if our dictionary
contains the number of likes for

240
00:14:23,006 --> 00:14:27,475
ok or perhaps a number of likes for the
gong

241
00:14:27,529 --> 00:14:31,565
or maybe the number blacks for
Venezuelan Google

242
00:14:31,889 --> 00:14:35,130
well I think she might contain the
numbers like these animals

243
00:14:35,013 --> 00:14:38,332
but it might not might be no money with
all we knew

244
00:14:38,449 --> 00:14:42,680
we need a way to model this fight and
this is a really good use case for every

245
00:14:42,068 --> 00:14:42,162
powerful feature

246
00:14:43,062 --> 00:14:46,110
swift known as options lighting like him
back up

247
00:14:47,001 --> 00:14:51,170
it anymore optionals and some other
passages think is beyond the basic

248
00:14:51,269 --> 00:14:54,337
thank you Dave so I'd love to use but as
well including of that my samples

249
00:14:54,949 --> 00:14:56,940
actually find it quite hard to say
funnest it with

250
00:14:56,094 --> 00:15:00,176
aardvark how do we get the numbers like
that will weaken subscript to make

251
00:15:01,076 --> 00:15:04,080
enquiry this book washer we get back

252
00:15:05,016 --> 00:15:08,073
well we kinda wanna be able to get to
type something back gonna want the

253
00:15:08,073 --> 00:15:08,922
number of legs

254
00:15:09,579 --> 00:15:12,630
as an integer opening a says this body
wasn't found

255
00:15:13,089 --> 00:15:17,970
so that's something else we could use
some magic integer value like an 80

256
00:15:17,097 --> 00:15:17,174
perhaps but

257
00:15:18,074 --> 00:15:21,086
but there is a possible value here
snakes don't have any legs

258
00:15:21,086 --> 00:15:25,097
so weak on his era in Objective C you
might be feeling things like and it's

259
00:15:25,097 --> 00:15:26,656
not found a -1

260
00:15:27,529 --> 00:15:30,597
you know we could use minus one here
father no its not possible to have -1

261
00:15:31,209 --> 00:15:32,209
legs

262
00:15:32,209 --> 00:15:36,930
but we could be using example when -1
was some kinda value wanted back

263
00:15:36,093 --> 00:15:40,110
so wouldn't it be great if we could you
some kinda value that didn't take up one

264
00:15:41,001 --> 00:15:43,020
of the possible integers

265
00:15:43,029 --> 00:15:46,033
well yes and swiftly to this weekend
optional

266
00:15:46,069 --> 00:15:50,588
an optional integer indicated he reliant
question mark

267
00:15:51,209 --> 00:15:54,216
means that we either get an integer back

268
00:15:54,279 --> 00:15:58,670
we get nothing at all was nothing at all
mean

269
00:15:58,067 --> 00:16:02,426
well nothing in swift is represented by
Neil three different objectives email it

270
00:16:03,029 --> 00:16:05,047
means nothing means no value at all

271
00:16:05,209 --> 00:16:09,266
in some optional body so we can test to
see

272
00:16:09,779 --> 00:16:13,000
if it's possible I count his mail to see
whether the animal was found the net if

273
00:16:13,000 --> 00:16:15,085
it is nil then the animal was not found

274
00:16:15,085 --> 00:16:19,098
what have been found how we get this
value out how to get back into out to

275
00:16:19,098 --> 00:16:19,447
the

276
00:16:20,329 --> 00:16:23,750
other the option to would will you stop
by

277
00:16:23,075 --> 00:16:26,097
we do that by forcing the value out
using the unwrap operator

278
00:16:26,097 --> 00:16:31,326
the exclamation mark here so i'm saying
is I think that the constant like count

279
00:16:32,199 --> 00:16:35,810
to the underlying value in five possible
like count that's what that

280
00:16:35,081 --> 00:16:39,116
I'm not operator does notice on not
specifying a type

281
00:16:40,016 --> 00:16:43,495
up like come here I don't need to
because this is an optional and

282
00:16:43,639 --> 00:16:47,250
the compiler knows that it's not plans
when I forcing that value out I get

283
00:16:47,025 --> 00:16:52,082
the underlying inside like count here is
an integer

284
00:16:52,082 --> 00:16:55,106
I fed forcing forcing the body about me
unwrapping it

285
00:16:56,006 --> 00:16:59,905
why my using that word well I am forcing
the value out

286
00:16:59,959 --> 00:17:05,000
if I try and unwrap an optional and that
in fact there's nobody that's nil

287
00:17:05,000 --> 00:17:08,001
actually gonna session social only do
this when I know for sure that the

288
00:17:08,001 --> 00:17:09,800
values that

289
00:17:09,899 --> 00:17:12,968
because %uh this was a very common
happen in swift which is to say

290
00:17:13,589 --> 00:17:16,610
if their value in this optional thing if
there is

291
00:17:16,061 --> 00:17:20,290
and unwrap it give me the value back so
I can use it so common in fact

292
00:17:20,839 --> 00:17:23,844
that we have a special syntax this is
much safer bundles a

293
00:17:24,339 --> 00:17:28,220
the two steps into into a single step
what this does is it says

294
00:17:28,022 --> 00:17:31,048
if possible let count has a value unwrap
it

295
00:17:31,048 --> 00:17:34,087
get it back to the like on constant and
I can use in the locker code

296
00:17:34,087 --> 00:17:39,096
if there is no value located skipped

297
00:17:39,096 --> 00:17:41,178
so it in a number examples of this
statement so far an if statement since

298
00:17:42,078 --> 00:17:44,160
we have to look much like they do in
other languages

299
00:17:45,006 --> 00:17:48,825
one exception there not is that there
are no parentheses here

300
00:17:49,419 --> 00:17:53,431
we can use principally like but that's
the optional Pat

301
00:17:53,539 --> 00:17:57,080
a so in this case they just that on that
this a punctuation noise

302
00:17:57,008 --> 00:18:00,066
so I'm gonna leave them out the braces
though

303
00:18:00,066 --> 00:18:04,085
races are required and as I can hear
from that utilizing this get a whole

304
00:18:04,085 --> 00:18:06,098
chain a bug that happen with nested it

305
00:18:06,098 --> 00:18:09,101
fire training it's that you know if you

306
00:18:10,028 --> 00:18:13,066
if you have about it statement to live
the code and even then to them correctly

307
00:18:13,066 --> 00:18:14,075
but the

308
00:18:14,669 --> 00:18:17,706
the second one film gonna happen that
bad cannot happen in swift we have

309
00:18:18,039 --> 00:18:20,115
braces for that they're required

310
00:18:20,799 --> 00:18:23,690
so we can do more complex things in a
statement of course we can have an l7

311
00:18:23,069 --> 00:18:24,069
that

312
00:18:24,069 --> 00:18:28,075
but in this case I'm watching mushing
multiple bodies I'm saying if the

313
00:18:28,075 --> 00:18:29,634
account is 0

314
00:18:30,309 --> 00:18:33,370
I'm printing on my animal slippers and
slides around

315
00:18:33,037 --> 00:18:36,095
about his one it may be hops around
otherwise it walks

316
00:18:36,095 --> 00:18:40,121
fun watching this that this like count
against multiple possible values

317
00:18:41,021 --> 00:18:44,065
really I should be using switch

318
00:18:44,065 --> 00:18:47,100
a switch in swift home try to I'm not
saying that three times

319
00:18:48,000 --> 00:18:51,034
is the most popular mall are controlled
by statements

320
00:18:51,034 --> 00:18:54,048
let's start with the basics fighting
with my count switching on that

321
00:18:54,048 --> 00:18:58,101
I'm using case to indicate the possible
values value 0 citizens lines case wanna

322
00:18:59,001 --> 00:18:59,057
help

323
00:18:59,057 --> 00:19:02,061
otherwise it walks the use case like you
do in

324
00:19:02,061 --> 00:19:06,127
see an objective-c not if I'm not
specifying break here

325
00:19:07,027 --> 00:19:11,050
cases in swift do not automatically full
free

326
00:19:11,005 --> 00:19:15,028
I'm also not limited to just matching
against integer values

327
00:19:15,073 --> 00:19:18,119
and swift I can much been subject to
need anybody's I like

328
00:19:19,019 --> 00:19:22,046
much in this is an IT action method and
I'm tracking which

329
00:19:22,046 --> 00:19:25,255
which object either is as interacting
with flick a switch on the Send

330
00:19:25,669 --> 00:19:29,732
much against it outlets in principle
message like Amazon objects

331
00:19:30,299 --> 00:19:34,470
ask about two inches from moment miss
reply to me much more expressive

332
00:19:34,047 --> 00:19:37,098
say I'm watching multiple bodies in a
single case at a time of numbers between

333
00:19:37,098 --> 00:19:40,109
1:13 animal limps

334
00:19:41,009 --> 00:19:44,076
even numbers between 10-14 it walks not
that nice

335
00:19:44,076 --> 00:19:47,159
very expressive but there's a problem
with this example if I trying compile

336
00:19:48,059 --> 00:19:48,064
this

337
00:19:49,009 --> 00:19:52,098
again ara the Arab says switch

338
00:19:52,179 --> 00:19:55,570
must be exhausted

339
00:19:55,057 --> 00:19:59,526
in swift you must include a case or
default for every possible value that

340
00:20:00,039 --> 00:20:02,077
that could be matched against

341
00:20:02,419 --> 00:20:06,340
so the easiest way to do that if the
supplied the full case

342
00:20:06,034 --> 00:20:09,041
and the reason for this is it again
makes you could say for

343
00:20:09,041 --> 00:20:12,440
much in your writing something that you
the state machine and you have a big

344
00:20:12,809 --> 00:20:14,080
switch statement in the middle

345
00:20:14,008 --> 00:20:17,044
and you forget one of the cases well in
your state machine grinds to a halt

346
00:20:17,044 --> 00:20:20,136
not bad I cannot happen in swift you
must have an exhaustive switch which

347
00:20:21,036 --> 00:20:24,715
means either case for everybody or
default

348
00:20:25,039 --> 00:20:28,070
so we must get individual values here

349
00:20:28,007 --> 00:20:32,606
but what I want too much against a a lot
a lot about he's a big range values

350
00:20:32,669 --> 00:20:35,732
well I can do just that like a match
against a range

351
00:20:36,299 --> 00:20:39,324
so this is bringing in pattern matching
a little bit so here we have there is

352
00:20:39,549 --> 00:20:40,350
still no legs

353
00:20:40,035 --> 00:20:44,076
128 as a few legs missus this close
range operator that they showed you

354
00:20:44,076 --> 00:20:45,121
earlier includes both the one

355
00:20:46,021 --> 00:20:49,110
and the aid three dots so that much is

356
00:20:49,299 --> 00:20:53,240
have a few legs otherwise not have legs
about an introduction to a pattern

357
00:20:53,024 --> 00:20:53,123
matching

358
00:20:54,023 --> 00:20:57,027
as a whole load more awesomeness that
you can find out about

359
00:20:57,063 --> 00:21:00,074
by watching the intermediate swift or

360
00:21:00,074 --> 00:21:04,119
so good examples we view so far we've
seen a lot of print line

361
00:21:05,019 --> 00:21:09,008
what is this thing the functions defined
in the standard library Prince

362
00:21:09,179 --> 00:21:12,250
somebody to the console with the final
own

363
00:21:12,025 --> 00:21:15,059
functions when Swift functions this

364
00:21:15,059 --> 00:21:18,157
define with the funky would see can read
this as declare function

365
00:21:19,057 --> 00:21:22,144
called say hello doesn't take any
promises it doesn't hurt anybody's

366
00:21:23,044 --> 00:21:26,122
and this case difference hello to the
console call it as you might imagine say

367
00:21:27,022 --> 00:21:28,088
hello friends

368
00:21:28,088 --> 00:21:31,123
course I got a promise I may be able to
say hello to someone specific

369
00:21:32,023 --> 00:21:36,026
plucking out in a name parameter notice
the consistency here

370
00:21:36,053 --> 00:21:39,058
name coat on string the name is a type

371
00:21:40,003 --> 00:21:44,652
string matches with the variable
declaration syntax and Constance as well

372
00:21:44,679 --> 00:21:47,730
so this means like a mouse a hello BBC

373
00:21:47,073 --> 00:21:52,382
hello BBC and using string interpolation
I get my name in the hat hello that

374
00:21:53,039 --> 00:21:56,940
in swift my promise I could have the
full value as well

375
00:21:56,094 --> 00:21:59,147
so this I you really want to say hello
world I can about

376
00:22:00,047 --> 00:22:03,085
with equals same name coal on is a type
string

377
00:22:03,085 --> 00:22:06,144
and how the default value world this
means I can call the function without

378
00:22:07,044 --> 00:22:08,533
specifying any name at all

379
00:22:08,929 --> 00:22:11,960
it'll say hello world but don't say hi
to you guys so

380
00:22:11,096 --> 00:22:15,189
hello BBC I can still do that anyway not
promises passing values into a function

381
00:22:16,089 --> 00:22:17,998
like anybody's out

382
00:22:18,799 --> 00:22:22,700
we return values in swift with the arrow
say I got a new function

383
00:22:22,007 --> 00:22:25,014
school build greeting this time takes a
name

384
00:22:26,004 --> 00:22:29,663
and it returns a string with the
concatenation operator that plus

385
00:22:30,059 --> 00:22:33,200
that so

386
00:22:33,002 --> 00:22:37,044
function returns a value with the arrow
and we get about body

387
00:22:37,062 --> 00:22:40,096
you look at a constant school greeting
I'm gonna set it to the return value

388
00:22:40,096 --> 00:22:41,161
from this function

389
00:22:42,061 --> 00:22:45,260
that is what I'm not doing I'm not
specify a type a free thing here

390
00:22:45,809 --> 00:22:49,070
it's very clear this returns a string
because that's what the function returns

391
00:22:49,007 --> 00:22:52,036
the compiler knows that it wasn't for
this correctly for us so we don't have

392
00:22:52,036 --> 00:22:53,059
to specify the Ken

393
00:22:53,059 --> 00:22:57,064
we can supply the value right that's a
vent line and it just works

394
00:22:58,009 --> 00:23:01,037
we talk about returning a single body
what about multiple values

395
00:23:01,037 --> 00:23:04,336
by Swift we can return multiple values
with this topple

396
00:23:04,669 --> 00:23:08,682
think that they've introduced earlier
what is a tuple

397
00:23:08,799 --> 00:23:12,900
will topple just a grouping up number
gripping a values

398
00:23:12,009 --> 00:23:16,016
negative any type any any number I D
that you want in this case

399
00:23:16,097 --> 00:23:19,194
first couple three double values
otherwise could have an interesting if I

400
00:23:20,094 --> 00:23:20,563
like

401
00:23:21,409 --> 00:23:25,690
or interesting and a double any
combination of things that you like

402
00:23:25,069 --> 00:23:28,147
what what I want one of these well it's
not a replacement for a full-blown data

403
00:23:29,047 --> 00:23:29,103
structure

404
00:23:30,003 --> 00:23:33,022
sometimes you really wanna class or
struct at to be most explicit

405
00:23:33,022 --> 00:23:36,087
to topple the really useful when you
just wanna POF multiple bodies around

406
00:23:36,087 --> 00:23:36,172
very simply

407
00:23:37,072 --> 00:23:40,120
such as when returning multiple bodies
from a function

408
00:23:41,002 --> 00:23:44,047
some this example I have a refresh
webpage function ago that the pressure

409
00:23:44,065 --> 00:23:45,071
the web page and it gives me back

410
00:23:46,025 --> 00:23:50,184
the status code that means an integer
code and a string message

411
00:23:50,409 --> 00:23:54,000
maybe get bundled together so I return
that with a tuple

412
00:23:54,000 --> 00:23:59,409
friends and comment string friends how
do I get those things how to use them

413
00:23:59,409 --> 00:24:04,400
skretta constant stomach got two names
also in parentheses with a comma in

414
00:24:04,004 --> 00:24:04,913
between

415
00:24:05,309 --> 00:24:09,250
and those get bound to the values the
comeback from the function

416
00:24:09,025 --> 00:24:11,109
it means like a man use them
individually and print them out

417
00:24:12,009 --> 00:24:12,097
separately

418
00:24:12,097 --> 00:24:16,125
so with decompose the tuple with these
names

419
00:24:17,025 --> 00:24:20,564
again notice thank you notice that I
haven't specified types

420
00:24:20,789 --> 00:24:24,820
hit return to the function is obvious
we've got two bodies coming back from

421
00:24:24,082 --> 00:24:25,109
their own internal string

422
00:24:26,009 --> 00:24:29,073
so these map to the names and compiled
in a statement and a message

423
00:24:29,073 --> 00:24:33,126
right that as I enter the string you see
an example this decomposition already

424
00:24:34,026 --> 00:24:38,060
that was when table showing you
enumeration a dictionary

425
00:24:38,006 --> 00:24:41,041
the way that we keep you the key in the
value in one go

426
00:24:41,095 --> 00:24:44,136
is for each iteration through the
dictionary you get back to top or pat

427
00:24:45,036 --> 00:24:48,083
containing the key and the value so
these names here these binding to those

428
00:24:48,083 --> 00:24:49,148
returns and then you can use them

429
00:24:50,048 --> 00:24:53,977
individually in in the for statement

430
00:24:54,409 --> 00:24:58,510
the couple decomposition is one way to
get the bodies out with another one

431
00:24:58,051 --> 00:25:01,340
not as we can actually named the bodies
in the tuple so I've got nothing to

432
00:25:01,799 --> 00:25:04,823
stream it is not entirely clear what
they are

433
00:25:05,039 --> 00:25:08,090
what if I could name them I must say I
have a code

434
00:25:08,549 --> 00:25:11,562
which is a type int and a message was it
it which is a type string

435
00:25:11,679 --> 00:25:14,685
same sin taxes promises and burial
decorations

436
00:25:15,279 --> 00:25:18,293
thing is a tight type

437
00:25:18,419 --> 00:25:22,445
this means when I call this function I
come out just declare a single constant

438
00:25:22,679 --> 00:25:26,490
call status I can then grab the
individual bits out by names that have

439
00:25:26,049 --> 00:25:28,113
taco dance that I thought message ready
for use

440
00:25:29,013 --> 00:25:32,562
plus functions only two related thing
now which is closures

441
00:25:32,679 --> 00:25:35,753
closer than swift much like books in
objective-c

442
00:25:36,419 --> 00:25:39,330
I just blocks of code you can pop in
around they can capture values from the

443
00:25:39,033 --> 00:25:39,086
surroundings

444
00:25:39,086 --> 00:25:43,775
go to have a very simple one school
greeting printer is a constant

445
00:25:44,549 --> 00:25:48,690
and how's this this disclosure that just
Prince hello world

446
00:25:48,069 --> 00:25:52,101
again I'm not specifying any type agrees
in principle it is very clear disclosure

447
00:25:53,001 --> 00:25:56,410
doesn't take any value doesn't return
anything either so the compiler will

448
00:25:56,419 --> 00:25:57,431
infer that this is

449
00:25:57,539 --> 00:26:00,650
this thing empty primes are MT per annum

450
00:26:00,065 --> 00:26:02,148
that's the type to disclose it doesn't
take any promises doesn't return

451
00:26:03,048 --> 00:26:04,133
anybody's

452
00:26:05,033 --> 00:26:09,050
everything looks kinda familiar I
recognize this this friends are a friend

453
00:26:09,005 --> 00:26:10,041
syntax not because it

454
00:26:10,086 --> 00:26:15,255
it looks very much like function syntax
there's a reason for that

455
00:26:16,029 --> 00:26:19,490
in swift functions are just named
closures

456
00:26:19,049 --> 00:26:22,135
so I can call my greeting printer thing
just by saying greeting printer prints

457
00:26:23,035 --> 00:26:25,038
antique prints hello world

458
00:26:25,038 --> 00:26:31,051
as a simple pleasure as a local variable
perhaps what about closures parameters

459
00:26:31,051 --> 00:26:36,080
what to do this same syntax again I'm
gonna create a repeat function this time

460
00:26:36,539 --> 00:26:40,553
this will repeat a toss to give a number
of times in the task is a closure

461
00:26:40,679 --> 00:26:44,250
so again empty friends are empty friends
doesn't take anybody's doesn't return

462
00:26:44,025 --> 00:26:44,954
anything

463
00:26:45,179 --> 00:26:50,600
and it will be repeated for the number
that I supplied how do I call it

464
00:26:50,006 --> 00:26:53,019
as call it twice I won't disclose a
trippy be repeated twice

465
00:26:53,073 --> 00:26:57,074
so i cant supply my closer in line right
there in the function call

466
00:26:57,074 --> 00:27:00,126
that about you not talking about syntax

467
00:27:01,026 --> 00:27:04,026
and we could do something really special
in swift not as if

468
00:27:04,026 --> 00:27:09,027
the closure is the last argument to this
function we can shifted outside at the

469
00:27:09,027 --> 00:27:13,123
outside to the front to see the function
called turn it into a trailing closure

470
00:27:14,023 --> 00:27:16,121
this paper code much more readable it
looks like a control place they are now

471
00:27:17,021 --> 00:27:18,096
which it is in this case

472
00:27:18,096 --> 00:27:21,170
and much more readable for modern
bringing trailer closes

473
00:27:22,007 --> 00:27:26,086
and so that's close as we talk for
functions we talk for tuples

474
00:27:27,049 --> 00:27:30,112
take us forward I'm gonna come back
today to get it data types and

475
00:27:31,012 --> 00:27:31,100
specifically

476
00:27:32,000 --> 00:27:35,058
classes let's take a look at how to
define class

477
00:27:35,058 --> 00:27:38,136
in swift we do this with the plot
keywords followed by the name of the

478
00:27:39,036 --> 00:27:40,215
class you want to create

479
00:27:40,539 --> 00:27:44,990
here I'm gonna great the vehicle and all
the places definition all its

480
00:27:44,099 --> 00:27:45,182
implementation appears between these

481
00:27:46,082 --> 00:27:49,138
curly braces all its properties all its
methods

482
00:27:50,038 --> 00:27:53,447
all it initializes we'll see how to
write all those

483
00:27:53,789 --> 00:27:58,020
in just a moment the first there are two
things you don't have to write

484
00:27:58,002 --> 00:28:02,010
and sweet you don't have to import
vehicle don't age

485
00:28:02,082 --> 00:28:05,088
and the reason is because they called
age does not exist

486
00:28:05,088 --> 00:28:08,111
swift doesn't have had a file there's no
need

487
00:28:09,011 --> 00:28:12,200
instead you just write your
implementation for your plans and that

488
00:28:12,299 --> 00:28:13,700
becomes a interface as well

489
00:28:13,007 --> 00:28:17,039
was no need to do to get the second
thing you don't have to write

490
00:28:18,002 --> 00:28:21,058
is we don't have to have a base class
civic

491
00:28:21,058 --> 00:28:24,907
because with doesn't have a universal
base class that every class must

492
00:28:25,429 --> 00:28:28,620
much time has come from you can still
use

493
00:28:28,062 --> 00:28:31,084
and a subject or any other cocoa Cocoa
Touch

494
00:28:31,084 --> 00:28:34,923
passes if you wish that's fine we don't
have to

495
00:28:35,679 --> 00:28:38,716
it make sense to vehicle to be a base
class for some

496
00:28:39,049 --> 00:28:43,950
high rocky places in Europe that can be
it can be it basic

497
00:28:43,095 --> 00:28:46,158
where we want to create surplus also we
do this by providing the

498
00:28:47,058 --> 00:28:51,060
sup last name followed again by coming
on and then thing we want surplus from

499
00:28:51,006 --> 00:28:55,042
and we'll come back to this bicycle so
surely the first left on a bit more

500
00:28:55,096 --> 00:28:55,665
detail

501
00:28:56,529 --> 00:29:00,770
to on basic storvick to stop buying a
property

502
00:29:00,077 --> 00:29:03,139
a property call number: wheels its
variable property the whole body is a

503
00:29:04,039 --> 00:29:05,082
right

504
00:29:05,082 --> 00:29:08,125
know that this is exactly the same
syntax we would use if we will be

505
00:29:09,025 --> 00:29:10,025
playing this is a very

506
00:29:10,025 --> 00:29:13,070
just moved into a place called here we
made it the

507
00:29:13,007 --> 00:29:16,011
variable property what we call rely
property objective-c

508
00:29:16,074 --> 00:29:19,883
but it could be constant in this case
and we just use less things were

509
00:29:20,549 --> 00:29:20,940
different

510
00:29:20,094 --> 00:29:23,453
a noble cause we'll keep it as a
variable for now see what the changes

511
00:29:24,299 --> 00:29:25,325
proposed changes value

512
00:29:25,559 --> 00:29:28,940
some supplies no

513
00:29:28,094 --> 00:29:31,147
big big difference that we have been
switched from objective-c

514
00:29:32,047 --> 00:29:36,052
is that we don't have any a distinction
between instance variables

515
00:29:36,052 --> 00:29:39,076
properties things with their one and the
same thing

516
00:29:39,076 --> 00:29:43,495
and in fact this for number will seek a
zero is will you have to Roy

517
00:29:44,179 --> 00:29:48,203
to find a property switch provides the
backing store for you

518
00:29:48,419 --> 00:29:51,620
you don't have to fight itself and
handles all access to them

519
00:29:51,062 --> 00:29:56,231
back in store for you as well in this
case where we just storing a value

520
00:29:56,789 --> 00:30:00,480
these are known as store properties we
do have a second coming of property as

521
00:30:00,048 --> 00:30:00,086
well

522
00:30:00,086 --> 00:30:03,120
known as computer properties but have
one of those who are vehicles

523
00:30:04,002 --> 00:30:06,018
subtropical plants

524
00:30:06,036 --> 00:30:09,069
who has a computer property that
provides a description about class to

525
00:30:09,069 --> 00:30:10,087
the string description of the

526
00:30:10,087 --> 00:30:13,146
the number will that house know that
Computer Properties

527
00:30:14,046 --> 00:30:18,051
don't have a backing store instead they
the generator or calculated value when

528
00:30:18,096 --> 00:30:19,110
the court

529
00:30:20,001 --> 00:30:23,064
to write warm we provide that type that
we want this property to have

530
00:30:23,073 --> 00:30:26,076
unjust return a value of the appropriate
time here

531
00:30:26,076 --> 00:30:30,083
we using string interpolation to return
the number wheels

532
00:30:30,083 --> 00:30:33,149
in this case I've provided read only
computer property

533
00:30:34,049 --> 00:30:37,126
is why I only have getter I could also
provide a sector as well

534
00:30:38,026 --> 00:30:41,094
if I wanted it to be weird right it
doesn't really make sense for this

535
00:30:41,094 --> 00:30:42,823
description to be relied

536
00:30:43,669 --> 00:30:46,710
is generated based on other properties
something to keep it as a read-only

537
00:30:46,071 --> 00:30:48,270
property

538
00:30:48,909 --> 00:30:52,070
well computer property is read-only you
can actually

539
00:30:52,007 --> 00:30:55,986
lose the getting the braces and just
return a value directly from the

540
00:30:56,049 --> 00:30:59,062
the m2 description of the the computer
property

541
00:30:59,179 --> 00:31:01,840
the end result is the same you just
don't have to write an extra level of

542
00:31:01,084 --> 00:31:01,533
nesting

543
00:31:02,289 --> 00:31:05,500
note however that Computer Properties

544
00:31:05,005 --> 00:31:08,554
even read only ones do you need to be
defined as variables

545
00:31:09,049 --> 00:31:12,147
even the you comfort them the file you
can change it can vary

546
00:31:13,029 --> 00:31:16,044
so they need to be there

547
00:31:16,179 --> 00:31:19,220
now that we've created a vehicle given
it a few properties

548
00:31:19,022 --> 00:31:22,026
let's create a new instance about
vehicle which we do with initialize the

549
00:31:22,062 --> 00:31:23,071
syntax

550
00:31:23,071 --> 00:31:26,126
this is the name of the class followed
by a pair of parentheses creates a new

551
00:31:27,026 --> 00:31:29,125
instance of this class

552
00:31:30,025 --> 00:31:33,039
because we provided a full body for our
school property

553
00:31:33,039 --> 00:31:37,448
it's clear what to do when initializing
this just that number will 20

554
00:31:37,799 --> 00:31:41,825
know that we didn't need to write clock
at the point we created this is

555
00:31:42,059 --> 00:31:45,880
circles all the memory allocation for
you there's no need to write our

556
00:31:45,088 --> 00:31:49,109
we also didn't need to buy the type once
again swift and for the type we want to

557
00:31:50,009 --> 00:31:51,074
create is clear from the thing on the
way

558
00:31:51,074 --> 00:31:55,263
confide that we want this to be a
vehicle

559
00:31:55,929 --> 00:31:58,976
as I mentioned earlier we we have these
default values number this means we

560
00:31:59,399 --> 00:32:00,412
actually haven't had to write

561
00:32:00,529 --> 00:32:03,740
an initializer at all because it's just
clear what to do here

562
00:32:03,074 --> 00:32:08,110
it's clear to create a new instance give
it a little funny there

563
00:32:09,001 --> 00:32:13,060
now that we've created our vehicle
inference we can use don't syntax to

564
00:32:13,159 --> 00:32:17,100
taxes properties photo printers
description we can see that it has a

565
00:32:17,001 --> 00:32:18,930
description is there wheels

566
00:32:19,029 --> 00:32:22,066
we change that with the two we can see
the description change it now has two

567
00:32:22,399 --> 00:32:24,340
weeks

568
00:32:24,034 --> 00:32:27,963
but it would be nice to create a class
at always has two wheels by default

569
00:32:28,269 --> 00:32:31,850
a bicycle supplies from earlier let's
see how we die we do that we make it

570
00:32:31,085 --> 00:32:33,150
have to be by default

571
00:32:34,005 --> 00:32:38,314
because we want bicycle to change the
value of an inherited property

572
00:32:38,809 --> 00:32:41,905
we do need to write an initializer and
this is how we do it the unit keyword

573
00:32:42,769 --> 00:32:46,850
followed by a pair of parentheses and
these come conferring from it is

574
00:32:46,085 --> 00:32:49,294
you can use provinces to customize your
initialization and they look just like

575
00:32:50,059 --> 00:32:50,145
the function from

576
00:32:50,919 --> 00:32:53,950
system showed earlier but we're not
going to use them in this case we're

577
00:32:53,095 --> 00:32:54,161
just going to use a new value to

578
00:32:55,061 --> 00:32:58,064
because we're changing

579
00:32:58,064 --> 00:33:01,099
an inherited property we do need to get
a superclass

580
00:33:01,099 --> 00:33:05,110
a chance to set up property for which we
do by calling secret of the net

581
00:33:06,001 --> 00:33:09,037
after all it introduced the property so
we need to get it give it a chance to

582
00:33:09,046 --> 00:33:10,051
set an initial value

583
00:33:10,051 --> 00:33:13,122
which we may then use the modified by
the week

584
00:33:14,022 --> 00:33:18,731
that with them so we can change the body
we can fit into that will go into a lot

585
00:33:18,929 --> 00:33:21,965
more detail on initialization in the
intermediates with talk

586
00:33:22,289 --> 00:33:25,350
the final one final thing tonight swift
initializes

587
00:33:25,899 --> 00:33:30,620
than return a value rather main role is
to make sure that every store property

588
00:33:30,062 --> 00:33:34,089
have about you by the time its
initialization complete

589
00:33:34,089 --> 00:33:37,134
so now we have a factor we can create
any bicycle we can

590
00:33:38,034 --> 00:33:41,037
printed description which we inherited
from vehicle and see it has two wheels

591
00:33:41,064 --> 00:33:41,136
by default

592
00:33:42,036 --> 00:33:45,132
all the old bicycles wanna to it

593
00:33:46,032 --> 00:33:50,021
so that changes the for money inherited
property but what if we want to change

594
00:33:50,309 --> 00:33:50,394
its behavior

595
00:33:51,159 --> 00:33:53,990
what if you wanted to do something
different every time it's called for

596
00:33:53,099 --> 00:33:55,148
this we override the property

597
00:33:56,039 --> 00:34:00,760
will create a new surplus vehicle call
call give it a new store property called

598
00:34:00,076 --> 00:34:00,083
speed

599
00:34:01,046 --> 00:34:05,050
initial value 0 does the right thing for
to be a double and will add an

600
00:34:05,005 --> 00:34:06,030
initializer that that's the

601
00:34:06,075 --> 00:34:09,354
because number of wheels before
wonderful same approach we just saw

602
00:34:10,029 --> 00:34:14,270
for for bicycle so override a
description

603
00:34:14,027 --> 00:34:17,050
in this case I'd like to have the speed
onto the into the description

604
00:34:17,005 --> 00:34:20,034
we just want them we want the property
in the same way as we did before

605
00:34:20,529 --> 00:34:24,040
to have that same name at the same time
to the override

606
00:34:24,004 --> 00:34:27,013
we have the override keyword on the
beginning

607
00:34:27,049 --> 00:34:31,470
this makes the avoid safe for two
reasons firstly it makes it clear

608
00:34:31,047 --> 00:34:34,476
we want to provide an override we
haven't just accidentally resent it

609
00:34:34,899 --> 00:34:38,790
property to have the same name into
things like this something else the fact

610
00:34:38,079 --> 00:34:38,428
that

611
00:34:39,139 --> 00:34:42,164
maybe we didn't even know about moreover

612
00:34:42,389 --> 00:34:45,394
it should prompt swift to go and check
that this property exit

613
00:34:45,889 --> 00:34:49,010
somewhere in of Cyprus Czech so there
definitely is something with the same

614
00:34:49,001 --> 00:34:49,099
name and things like

615
00:34:49,099 --> 00:34:53,208
Sourav right will do what we expect in
this case

616
00:34:54,099 --> 00:34:57,240
we'll just call the super description to
get the number of whales

617
00:34:57,024 --> 00:35:00,153
and without an actual text on the end
the show the speed

618
00:35:00,369 --> 00:35:03,465
so if you for the car we can see that
the the description default

619
00:35:04,329 --> 00:35:08,490
four wheels their loss per hour if we
change the speed it affect now includes

620
00:35:08,049 --> 00:35:10,102
news feed is £1

621
00:35:11,002 --> 00:35:14,080
about the way to change the behavior
have inherited property but

622
00:35:14,008 --> 00:35:17,027
maybe sometimes that's a bit overkill we
don't want to see

623
00:35:17,099 --> 00:35:20,116
want to change how it works I just want
to know when it changes wanted changes

624
00:35:21,016 --> 00:35:21,063
to

625
00:35:21,063 --> 00:35:24,115
for this we have property of service

626
00:35:25,015 --> 00:35:29,073
so to show these accrue to suppress a
car called parents come

627
00:35:29,073 --> 00:35:33,097
the parents car doesn't stop me going at
a certain speed just watches how fast

628
00:35:33,097 --> 00:35:34,116
you going

629
00:35:35,016 --> 00:35:38,093
and if you go too fast it issues a
warning that says careful there

630
00:35:38,093 --> 00:35:42,002
that's a bit too fast to do this we
still

631
00:35:42,839 --> 00:35:45,970
override a property in this case where
overriding the

632
00:35:45,097 --> 00:35:48,181
speak property we inherited from car
know that this Android is first or

633
00:35:49,081 --> 00:35:49,143
property

634
00:35:50,043 --> 00:35:53,128
not a computer property but still within
the same way

635
00:35:54,028 --> 00:35:57,096
this time however we will provide a
custom getter and setter

636
00:35:57,096 --> 00:36:00,102
will provide either will face or did
settles over

637
00:36:01,002 --> 00:36:06,027
and will for his call just before this
just after the valley changes

638
00:36:06,027 --> 00:36:09,095
will forget a new value constant that
you can use within the body this

639
00:36:09,095 --> 00:36:09,170
observer

640
00:36:10,007 --> 00:36:13,676
did that getting old buddy constancy you
can see what about you was or

641
00:36:14,369 --> 00:36:17,930
has just changed to be within the doctor

642
00:36:17,093 --> 00:36:21,100
in this case will just use whilst and
will use but new value comes into

643
00:36:22,000 --> 00:36:25,859
keep an eye on the speed in this car if
it goes over 65 miles an hour

644
00:36:25,859 --> 00:36:29,390
will issue a warning careful

645
00:36:29,039 --> 00:36:33,097
about how we are properties what about
methods having a mattress topper

646
00:36:33,097 --> 00:36:37,128
well is a simple clerical counter just
keeps track of how many times

647
00:36:38,028 --> 00:36:41,116
something up does this with a store
property call camps

648
00:36:42,016 --> 00:36:45,080
anything way that the store property
looks just like a variable

649
00:36:45,008 --> 00:36:49,023
methods and swiftly just like functions
want to miss to study a

650
00:36:49,095 --> 00:36:51,193
here this in criminal matters looks just
like we're going to function at the same

651
00:36:52,093 --> 00:36:52,100
time

652
00:36:53,063 --> 00:36:56,121
this case it just fans want to count six
points called to make it a bit more

653
00:36:57,021 --> 00:36:58,090
complex if we are to privatize

654
00:36:58,009 --> 00:37:02,033
again is just the same as a function
from it as we saw earlier

655
00:37:03,014 --> 00:37:06,089
know that when we refer to come here we
don't have to use over-the-counter

656
00:37:06,089 --> 00:37:08,778
inside the method because it's clear
what we're referring to there's no

657
00:37:09,579 --> 00:37:11,320
ambiguity

658
00:37:11,032 --> 00:37:15,551
want when we do it yourself is if we
have affected his promise to name is the

659
00:37:15,839 --> 00:37:17,190
famous the property name

660
00:37:17,019 --> 00:37:20,046
here we have a mathematical can't so in
this case

661
00:37:20,046 --> 00:37:25,455
we you thought still can't refer to the
property and can't refer to the front

662
00:37:25,869 --> 00:37:28,967
so that's how we treat classes we given
properties we give initializes and how

663
00:37:29,849 --> 00:37:31,230
we give them back

664
00:37:31,023 --> 00:37:34,025
another invite them back up to take it
beyond places

665
00:37:34,043 --> 00:37:37,212
and to show some of the other data
structures you can create in sweat make

666
00:37:37,599 --> 00:37:38,625
the building blocks of your

667
00:37:38,859 --> 00:37:43,180
thank you thank you so be on classes
which we go next

668
00:37:43,018 --> 00:37:47,707
gonna structures structure this week to
define using the struct keywords a

669
00:37:47,869 --> 00:37:48,910
hearing at a defined

670
00:37:48,091 --> 00:37:52,116
a couple maybe three a point to have an
X&Y coordinates

671
00:37:53,016 --> 00:37:57,050
size to the width and height rectangle
with an art and a science

672
00:37:57,005 --> 00:38:01,864
with structures I get a break from the
member was initialized by default

673
00:38:02,359 --> 00:38:05,382
it means is really easy to create
instances these structures just by

674
00:38:05,589 --> 00:38:06,690
supplying values

675
00:38:06,069 --> 00:38:09,748
the properties in lines like supplying
an X&Y with my height

676
00:38:10,369 --> 00:38:13,443
point to the site for the rectangle if I
really wanted to

677
00:38:14,109 --> 00:38:17,130
I could actually provide custom
initializes in my structures

678
00:38:17,013 --> 00:38:21,019
find out more about that check out the
intermediates with talk

679
00:38:21,073 --> 00:38:25,102
okay so this is a simple structure has a
margin as a size as the two

680
00:38:26,002 --> 00:38:29,047
two properties it would be rather nice
if I could

681
00:38:29,047 --> 00:38:33,080
Adam area to my rectangle a public
computer properties are coming up on

682
00:38:33,008 --> 00:38:33,103
others

683
00:38:34,075 --> 00:38:38,079
yes yes we can so here's an area
property on my rectangle just returns

684
00:38:38,079 --> 00:38:39,156
the wait times the height

685
00:38:40,056 --> 00:38:44,068
okay property is a great but what about
methods I want more than just the

686
00:38:44,068 --> 00:38:45,100
property

687
00:38:46,000 --> 00:38:50,019
when Swift structure can have a method
as well so here I haven't is bigger than

688
00:38:50,019 --> 00:38:53,080
other wrecked method I compiled a
rectangle in return

689
00:38:53,008 --> 00:38:56,020
about me back indicates whether it's
bigger than the other one

690
00:38:56,092 --> 00:38:59,147
structures in swift incredibly powerful
a lot more functionality than you

691
00:39:00,047 --> 00:39:03,078
when you use to NC so that raises the
question

692
00:39:03,078 --> 00:39:06,114
what is the difference between a
structure in a close

693
00:39:07,014 --> 00:39:10,039
in a couple examples we got a rectangle
thats at the moment the structure

694
00:39:10,039 --> 00:39:13,125
we've got a Windows a hypothetical
window class the first to some user

695
00:39:14,025 --> 00:39:14,077
interface

696
00:39:14,077 --> 00:39:17,124
object how do you determine whether you
want

697
00:39:18,024 --> 00:39:21,097
a class or structure given you gotta
love the same functionality

698
00:39:21,097 --> 00:39:24,130
whether to primary differences between
classes in structures the first

699
00:39:25,003 --> 00:39:25,094
difference

700
00:39:26,021 --> 00:39:29,073
at the structures cannot inherit from
other structures

701
00:39:29,073 --> 00:39:33,089
the second difference is how values the
past around

702
00:39:33,089 --> 00:39:37,089
political window I'm gonna create a
window

703
00:39:37,089 --> 00:39:42,153
that means I get the window object right
now this is a a reference to that object

704
00:39:43,053 --> 00:39:47,882
but what the I declared my window as a
structure

705
00:39:48,359 --> 00:39:51,420
well-struck to the pass by value that
means the body's a cop it when they

706
00:39:51,042 --> 00:39:53,049
passed around so my setup function here

707
00:39:53,049 --> 00:39:56,918
would get a copy of my window that seems
weird what would happen will

708
00:39:57,359 --> 00:40:01,360
a public at a second wind on screen not
doesn't feel right at all

709
00:40:01,369 --> 00:40:04,690
so window it should be a class because
classes apart

710
00:40:04,069 --> 00:40:07,127
by reference in swift not means my phone
function

711
00:40:08,027 --> 00:40:13,052
get a reference to the window but I gave
it reference to the subject

712
00:40:13,052 --> 00:40:16,148
okay that's classes what about
structures what look at the frame at the

713
00:40:17,048 --> 00:40:17,139
window

714
00:40:18,039 --> 00:40:22,043
it's a rectangle I want to get this
frame I wanna do something to it I want

715
00:40:22,043 --> 00:40:23,212
to use it somewhere else

716
00:40:23,599 --> 00:40:27,520
so I can extract it into a variable me
frame

717
00:40:27,052 --> 00:40:31,098
what happens if rectangle was actually
class

718
00:40:31,098 --> 00:40:35,217
well if I felt the origin here I can
affect my window

719
00:40:36,099 --> 00:40:37,196
clearly that's not what I want to do I
just wanna change it and use it

720
00:40:38,069 --> 00:40:40,130
somewhere else and is covering up my
flight so

721
00:40:40,013 --> 00:40:43,049
clearly bad so Windows

722
00:40:43,049 --> 00:40:46,094
frame is a rectangle and the rectangle
that should be a value type

723
00:40:46,094 --> 00:40:51,473
a structure structure the pass by value
that covered around that the past around

724
00:40:52,319 --> 00:40:56,220
to talk about the difference between
weapons and body types of the constants

725
00:40:56,022 --> 00:40:58,029
and variables with these things in mind

726
00:40:58,092 --> 00:41:02,541
a cell like rates a window and I this
time I declare it with molecular that

727
00:41:03,369 --> 00:41:04,880
means I have a constant wind

728
00:41:04,088 --> 00:41:07,105
reference what does that really mean

729
00:41:08,005 --> 00:41:11,804
that means I have a reference to a
window object

730
00:41:11,849 --> 00:41:15,410
the window object isn't affected by this
constant is only the reference that is

731
00:41:15,041 --> 00:41:18,094
so I can still change my windows title
quite happily I can still set out to

732
00:41:18,094 --> 00:41:20,013
hello and it just works

733
00:41:20,859 --> 00:41:23,958
but it's a constant reference that means
if I try

734
00:41:24,849 --> 00:41:28,400
ok but this reference to a different
window a compile-time error

735
00:41:28,004 --> 00:41:30,061
because I cannot meet a to constantly
I'm trying to take the constant

736
00:41:30,097 --> 00:41:32,114
reference here

737
00:41:33,014 --> 00:41:37,069
what about value types a spot with a
variable I'm gonna create a valuable

738
00:41:37,069 --> 00:41:38,095
point

739
00:41:38,095 --> 00:41:41,180
for a value type try to think of it as a
big value in and of itself the whole

740
00:41:42,008 --> 00:41:43,013
thing is a value

741
00:41:44,003 --> 00:41:48,065
so appointed an X&Y coordinate so this
point one has an X on the line that

742
00:41:48,092 --> 00:41:51,169
if I change my point 1x going to update
that value inside 25

743
00:41:52,069 --> 00:41:55,478
not find is available it can do that but
if I use

744
00:41:56,099 --> 00:41:59,700
let to declare point2

745
00:41:59,007 --> 00:42:03,146
the entire value is now immutable that's
not constant that means I cannot set

746
00:42:03,839 --> 00:42:06,864
point X a the x-coordinate that because

747
00:42:07,089 --> 00:42:11,115
I cannot meet a to constant entirety
that value is constant

748
00:42:11,349 --> 00:42:16,440
him so when I wanna like a me take my
ValueType depends

749
00:42:16,044 --> 00:42:19,130
on the declaration use so what does that
mean if I want to add some kind of a

750
00:42:20,003 --> 00:42:21,064
method to my structure that that

751
00:42:21,091 --> 00:42:24,780
change it so I want something that moves
a point

752
00:42:25,599 --> 00:42:29,675
to the right by given number well thats
changing that the value so I shouldn't

753
00:42:30,359 --> 00:42:32,364
be able to do this on a constant

754
00:42:32,859 --> 00:42:36,680
if you do want to do this then you must
declare the method is mutating and it

755
00:42:36,068 --> 00:42:38,163
tells the compiler that you're changing
the underlying value

756
00:42:39,063 --> 00:42:42,128
that means if you declare a point with a
constant in this case

757
00:42:43,028 --> 00:42:45,092
and you try and move it to the right you
get an error because you cannot meet a

758
00:42:45,092 --> 00:42:47,146
to constant

759
00:42:48,046 --> 00:42:51,195
structures that's one example a value
type in swift

760
00:42:51,609 --> 00:42:56,210
another one is enumerations Sony rations
which can have moral values much like

761
00:42:56,021 --> 00:42:56,069
see

762
00:42:56,069 --> 00:42:59,125
to have a plan numeration and has a rule
value Int

763
00:43:00,025 --> 00:43:03,090
so I'm using a one based index nectar is
the first planet venus is a second I

764
00:43:03,009 --> 00:43:04,038
could use if I wanted

765
00:43:05,019 --> 00:43:08,073
but I want one so for must have some

766
00:43:08,073 --> 00:43:11,170
somebody how do I determine what that
value is

767
00:43:12,007 --> 00:43:15,065
escrita constant number unaffected to
the to rule

768
00:43:16,028 --> 00:43:19,077
value all planet daughter that will get
me back three

769
00:43:19,329 --> 00:43:22,760
that's how I get the real value back out
so I can use

770
00:43:22,076 --> 00:43:25,142
integers an underlying value but it's
worth I can use other types as well

771
00:43:26,042 --> 00:43:30,201
such as a string of maybe a character
here I can now named the top line P

772
00:43:30,579 --> 00:43:32,740
ten-count return characters

773
00:43:32,074 --> 00:43:36,183
with using any known sometimes it
doesn't make sense to have

774
00:43:36,849 --> 00:43:40,960
an underlying value at all sometimes

775
00:43:40,096 --> 00:43:43,104
the cases just bodies in their own right
to have a compass Pointe

776
00:43:44,076 --> 00:43:48,113
has north south east and west have no
real number or string that really makes

777
00:43:49,013 --> 00:43:50,038
sense that I to these

778
00:43:50,038 --> 00:43:53,049
so the dust bunnies they despise in
themselves

779
00:43:53,049 --> 00:43:56,101
how do I work with them as credit
directions ahead and survival I'm gonna

780
00:43:57,001 --> 00:44:01,093
maybe change that in the future and I
decided to Compass Point dot West

781
00:44:01,093 --> 00:44:04,512
compiler will and say oh to compass
points so it knows the direction to head

782
00:44:05,349 --> 00:44:07,170
is a compass Pointe

783
00:44:07,017 --> 00:44:10,436
a sampling some directions might change
direction I wanna head East how do I say

784
00:44:10,589 --> 00:44:11,550
that

785
00:44:11,055 --> 00:44:14,123
because the compiler knows that it's a
compass Pointe all I have to say

786
00:44:15,023 --> 00:44:20,071
is enough to change that to East which
is don't East in this example

787
00:44:20,071 --> 00:44:23,102
this works extremely well when you're
working with Coca touch Inc okay

788
00:44:24,002 --> 00:44:27,046
we've done some incredible magic made
important things that are into swift

789
00:44:27,046 --> 00:44:30,071
so that if you're dealing with the UI
label for example you want to set the

790
00:44:30,071 --> 00:44:32,710
text alignment property

791
00:44:33,349 --> 00:44:37,950
in Objective C you do that with and text
alignment rack right

792
00:44:37,095 --> 00:44:40,464
but the combined those text alignment is
and its textile I mean that the type

793
00:44:41,319 --> 00:44:42,390
that all we need to do

794
00:44:42,039 --> 00:44:46,090
its supply enough to specify that it is
right so the text alignment is now right

795
00:44:46,009 --> 00:44:49,058
much more readable much more concise
super awesome

796
00:44:50,039 --> 00:44:53,115
incomes can have row values underlying
values

797
00:44:54,015 --> 00:44:57,047
no bags at all but that's a different
type I wanna talk about not

798
00:44:57,047 --> 00:45:01,144
enumerations with associated values
neither public discriminated unions

799
00:45:02,044 --> 00:45:05,113
that the given example let's consider a
train trains are usually one of two

800
00:45:06,013 --> 00:45:06,098
things that I've

801
00:45:06,098 --> 00:45:10,114
on time sometimes all that delayed

802
00:45:11,014 --> 00:45:15,015
if there on time they just on time if it
delayed

803
00:45:15,015 --> 00:45:19,020
the delayed by a number of minutes so in
this case we have into imprint disease

804
00:45:19,065 --> 00:45:20,117
after the delayed case

805
00:45:21,017 --> 00:45:25,166
and it says that I want to be able to to
catch both either on time

806
00:45:25,319 --> 00:45:29,050
all the delay in the number minutes that
is delayed

807
00:45:29,005 --> 00:45:32,554
let's see how we work with that greatest
artists variable

808
00:45:32,599 --> 00:45:35,910
and i guess its initial value to train
status dot on time

809
00:45:35,091 --> 00:45:39,099
trains very optimistically always start
on time but as we all know

810
00:45:39,099 --> 00:45:42,948
and sometimes stuff happens and they get
delayed

811
00:45:43,839 --> 00:45:46,930
and so we can change that just by saying
he is now delayed

812
00:45:46,093 --> 00:45:49,181
and we can supply the value 42 minutes
right that

813
00:45:50,081 --> 00:45:56,092
so that's associated value very powerful
but we can't do we can do more than this

814
00:45:56,092 --> 00:45:58,190
I know out a little bit more
functionality to my train status I wanna

815
00:45:59,009 --> 00:46:00,016
stop by adding

816
00:46:00,097 --> 00:46:03,114
an initializer this means that when I

817
00:46:04,014 --> 00:46:07,106
declare something that uses the strength
that I think will automatically get the

818
00:46:08,006 --> 00:46:11,065
on time status by default

819
00:46:11,119 --> 00:46:16,810
not gonna stop that as I have a computed
property called description

820
00:46:16,081 --> 00:46:20,089
this time I'm gonna determine what the
value is and then get back a string that

821
00:46:20,089 --> 00:46:21,145
mean something sensible so

822
00:46:22,045 --> 00:46:25,140
it is on time it will say on time if
it's delayed

823
00:46:26,004 --> 00:46:29,443
gonna grab a number minutes it is
delayed by by binding minutes and head

824
00:46:29,839 --> 00:46:30,690
to the number

825
00:46:30,069 --> 00:46:34,069
and then I can build a string using that
with string interpolation

826
00:46:34,069 --> 00:46:38,074
Sony missions a hugely powerful here how
do I work with the things I've done this

827
00:46:38,074 --> 00:46:41,117
when I convict delay I can declare it
without a sequestering strange how to

828
00:46:42,017 --> 00:46:43,064
spur and that will give me

829
00:46:43,064 --> 00:46:46,079
and on time status by default so if I
print the description it will say it

830
00:46:46,079 --> 00:46:47,115
sometime

831
00:46:48,015 --> 00:46:51,434
then it gets too late and so I can set
the delay

832
00:46:51,569 --> 00:46:56,170
and now Michael description it will give
me today by 42 minutes

833
00:46:56,017 --> 00:46:59,196
but this about us it's very much tied to
a train

834
00:46:59,349 --> 00:47:02,376
very likely that the only place we will
use it in our app is inside some kind of

835
00:47:02,619 --> 00:47:03,560
training class

836
00:47:03,056 --> 00:47:06,575
seems a bit ashamed to have it display
thing around for anyone to use

837
00:47:07,079 --> 00:47:10,440
when he's making it super easy for
anyone to use be nice if we could

838
00:47:10,044 --> 00:47:13,203
high of status into the train class
itself

839
00:47:13,599 --> 00:47:17,710
when Swift we can do that by nesting the
type so we can grab

840
00:47:17,071 --> 00:47:20,190
we can put of others in find the train
class

841
00:47:20,829 --> 00:47:24,160
nested right that's not just call status
because inside the train

842
00:47:24,016 --> 00:47:27,073
set up as before I can still have a
property on my train that is a bit of a

843
00:47:27,073 --> 00:47:29,099
status and it will be set on time by
default

844
00:47:29,099 --> 00:47:32,144
and we can just use it so we can def
types and swift

845
00:47:33,044 --> 00:47:37,067
as we want a more power I like power
extensions

846
00:47:37,067 --> 00:47:41,080
for expansion in swift very much like a
cab to be in objective-c

847
00:47:41,008 --> 00:47:45,053
we can extend any class we like but in
swift we can go a little bit further

848
00:47:46,025 --> 00:47:49,093
we can actually extend any names tight
we like

849
00:47:49,093 --> 00:47:52,192
including value types so here I have my
size structure you saw earlier

850
00:47:53,092 --> 00:47:56,531
that's the structure like at this
mutating function it increases the size

851
00:47:57,359 --> 00:47:58,680
by given factor

852
00:47:58,068 --> 00:48:02,073
because it changes the underlying values
but not as mutating

853
00:48:02,073 --> 00:48:06,121
but I'm not just limited to name typed
that I have been swift

854
00:48:07,021 --> 00:48:10,380
I can actually also extend any name type
I have available to me

855
00:48:10,569 --> 00:48:14,290
to him on extending CG song is that from
coal graphics is a structure defined

856
00:48:14,029 --> 00:48:17,041
see at the same increase by factor

857
00:48:17,041 --> 00:48:20,054
when I've done that is available
anywhere in my swift code

858
00:48:20,054 --> 00:48:24,059
from this extension traffic sending in
names type

859
00:48:25,004 --> 00:48:28,523
I wanna see what else I can do this
wouldn't it be fantastic if I could

860
00:48:28,559 --> 00:48:28,612
extend

861
00:48:29,089 --> 00:48:32,138
mmm and in will

862
00:48:32,579 --> 00:48:36,970
yes it would and let's do that interest
just the structure defined in the

863
00:48:36,097 --> 00:48:38,148
standard libraries like an extended

864
00:48:39,048 --> 00:48:42,096
and I had eight repetitions function to
my integer

865
00:48:42,096 --> 00:48:45,179
this is going to take a tart the closure
has been repeated how whatever value

866
00:48:46,079 --> 00:48:49,378
the integer is their adult self that
will get me

867
00:48:50,089 --> 00:48:53,780
the number repetitions I need to know I
can supply closure

868
00:48:53,078 --> 00:48:56,857
on the call to repetitions on any
integer value

869
00:48:57,559 --> 00:49:01,563
so I can say for example 500 repetitions
and supply closer

870
00:49:01,599 --> 00:49:06,010
and I'll get hello printed five hundred
times for the small

871
00:49:06,001 --> 00:49:09,610
because because the closure if the last
argument

872
00:49:09,619 --> 00:49:12,619
and it's been this function call I can't
wait it out

873
00:49:12,619 --> 00:49:16,290
put outside to the front sees you know
what

874
00:49:16,029 --> 00:49:19,068
for training closures if there are no
other arguments I don't even need the

875
00:49:19,329 --> 00:49:19,407
parentheses

876
00:49:20,109 --> 00:49:23,640
so this turns into five hundred
repetitions do this thing

877
00:49:23,064 --> 00:49:26,064
like control flow for just extended an
int

878
00:49:26,064 --> 00:49:29,066
a value type internist and alive how
amazing is that

879
00:49:29,066 --> 00:49:32,099
as we head more into gonna blow your
mind territory I'll leave you with one

880
00:49:32,099 --> 00:49:33,918
more thing

881
00:49:34,809 --> 00:49:39,800
not generics let's start with a
non-generic example

882
00:49:39,008 --> 00:49:42,072
here I have stock a vintage isn't back

883
00:49:43,044 --> 00:49:46,413
and I can push bodies onto the stock I
can pop them off again

884
00:49:46,809 --> 00:49:50,811
and that's that's great but what if I
wanted a double stack or strings tackle

885
00:49:50,829 --> 00:49:51,450
hell even if

886
00:49:51,045 --> 00:49:55,454
backups tax how I would I do that what
happened duplicates

887
00:49:55,859 --> 00:49:57,954
this definition multiple times than
anything I would change would be these

888
00:49:58,809 --> 00:49:59,813
highlighted bits

889
00:49:59,849 --> 00:50:03,400
the ins across that the types used for
the array and

890
00:50:03,004 --> 00:50:06,004
the two functions that I have the two
methods

891
00:50:06,004 --> 00:50:09,017
went to be lovely if I could just so you
know this should work with any type it

892
00:50:09,053 --> 00:50:11,060
all

893
00:50:12,023 --> 00:50:15,602
we can do that with the generic so
generic sense with you indicate the type

894
00:50:15,809 --> 00:50:19,940
with these angle brackets under a rock
anti says there is a generic type

895
00:50:19,094 --> 00:50:20,213
parameter here

896
00:50:21,059 --> 00:50:24,800
and anything that you 250 that must be
the same time

897
00:50:24,008 --> 00:50:29,797
elements is just an array of teas push
now take the teapot not return dirty

898
00:50:30,589 --> 00:50:34,400
was that mean means that we can now
build of documents

899
00:50:34,004 --> 00:50:37,057
like this week into sacred documents put
on 50

900
00:50:37,093 --> 00:50:40,098
notice I'm not specify anything here to
compile a nose that push must take an

901
00:50:41,043 --> 00:50:41,089
integer

902
00:50:41,089 --> 00:50:44,146
if it's a fact events so I'm pushing 50
on I can pop bottle

903
00:50:45,046 --> 00:50:48,048
and it knows that lasting will be of
type int because that's when dealing

904
00:50:48,048 --> 00:50:48,114
with

905
00:50:49,014 --> 00:50:52,067
what about strings likenesses with the
spring as well tonight the greatest

906
00:50:52,067 --> 00:50:55,756
strength back a backup strings and put
on a string

907
00:50:56,359 --> 00:50:59,383
began compiling know that many what the
string when I pop it off it knows that

908
00:50:59,599 --> 00:51:02,630
I'm returning a string therefore I can
print it

909
00:51:02,063 --> 00:51:05,532
so that generics it's a very very brief
introduction to generics

910
00:51:06,099 --> 00:51:09,660
to get further details on all the or
some stuff you can do you should check

911
00:51:09,066 --> 00:51:09,104
out

912
00:51:10,004 --> 00:51:14,543
the advance with talk brings me onto a
question

913
00:51:14,579 --> 00:51:17,690
how do you learn sway how do you go

914
00:51:17,069 --> 00:51:22,114
figure out all the cool stuff you can do
with this language well before up front

915
00:51:23,014 --> 00:51:26,015
this book is available in the document
online

916
00:51:26,015 --> 00:51:28,080
made when the iBookstore thus with
programming languages the canonical

917
00:51:28,008 --> 00:51:30,777
guide and reference to the language

918
00:51:31,569 --> 00:51:35,630
we also have using Twitter taken a
jetted series in the document tells you

919
00:51:35,063 --> 00:51:38,067
how to work with coconut get to see from
existing code

920
00:51:39,003 --> 00:51:43,572
house with them to operate with okay for
more information on the language itself

921
00:51:43,599 --> 00:51:46,645
check out the intermediate and advance
with talks more information on

922
00:51:47,059 --> 00:51:50,115
objective-c and interoperability check
out the two interoperability

923
00:51:50,619 --> 00:51:53,640
in that and into meetings with the check
to see talks

924
00:51:53,064 --> 00:51:56,078
we are in lab all week come down tell us
what you think we want to hear your

925
00:51:56,078 --> 00:51:57,080
questions

926
00:51:57,098 --> 00:52:00,967
if you're playing on a home talk to this
guy they belong he's our fans left

927
00:52:01,849 --> 00:52:03,923
check out the developer forum thank you
very much that is swift

