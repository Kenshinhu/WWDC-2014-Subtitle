1
00:00:11,719 --> 00:00:14,580
good morning everyone my name is couple
Christian movie

2
00:00:14,058 --> 00:00:17,827
and I work in car audio I'm here today
to talk to you about

3
00:00:18,349 --> 00:00:22,230
a new API call AB Audioengine but we're
introducing

4
00:00:22,023 --> 00:00:27,122
for Mac OS 10 years somebody and I USA
as part of today's talk

5
00:00:28,022 --> 00:00:31,113
will first look at an overview of core
audio and then we'll dive into a the

6
00:00:32,013 --> 00:00:32,022
Audioengine

7
00:00:33,003 --> 00:00:37,028
look at some other goals behind the
project features of the new API

8
00:00:37,028 --> 00:00:41,397
the different building block should be
using and finally will do

9
00:00:41,649 --> 00:00:45,706
a section on gaming and 3d audio let's
get started

10
00:00:46,219 --> 00:00:49,980
for those of you who aren't familiar
with core audio

11
00:00:49,098 --> 00:00:52,587
koran your provides a number of capi ice

12
00:00:53,469 --> 00:00:56,554
as part of different frameworks on both
bio s and Mac OS 10

13
00:00:57,319 --> 00:01:01,420
and you can use these different APIs to
implement audio features and

14
00:01:01,042 --> 00:01:01,139
applications

15
00:01:02,039 --> 00:01:06,113
so using these APIs you will be able to
play and the car sounds

16
00:01:07,013 --> 00:01:10,013
with low-latency converts between

17
00:01:10,013 --> 00:01:13,014
are different file and data formats read
and write

18
00:01:13,014 --> 00:01:18,077
audiophiles work with many did %ah and
also play sounds like get specialized

19
00:01:18,077 --> 00:01:21,082
several years ago

20
00:01:22,027 --> 00:01:26,045
we added sum up simple objective seek
losses to eighty foundation

21
00:01:26,045 --> 00:01:29,052
and they called AV audio player an AV
audio recorder

22
00:01:29,052 --> 00:01:32,931
and using these process you can play
sounds from files

23
00:01:33,399 --> 00:01:37,456
or a card directly to a file now while
these classes worked really well for

24
00:01:37,969 --> 00:01:39,280
simple use cases

25
00:01:39,028 --> 00:01:43,039
a more advanced user might find
themselves a bit limited so this year

26
00:01:43,039 --> 00:01:46,588
were adding a whole new set of API to AB
foundation

27
00:01:46,939 --> 00:01:50,003
call AV audio engine and my colleague
Doug

28
00:01:50,579 --> 00:01:53,670
also spoke about a number of abou
utility classes

29
00:01:53,067 --> 00:01:57,103
and Section 501 so using this new API

30
00:01:58,003 --> 00:02:01,662
you will be able to write powerful
features we just a fraction

31
00:02:01,689 --> 00:02:05,710
abiam on of code that you may have had
two previously right so let's get

32
00:02:05,071 --> 00:02:05,620
started

33
00:02:06,259 --> 00:02:10,610
what will the goals behind this project
one of the biggest goals

34
00:02:10,061 --> 00:02:14,079
was to provide a powerful and
feature-rich API said and were able to

35
00:02:14,079 --> 00:02:18,102
do that because we're building on top of
our existing core audio AP ice

36
00:02:19,002 --> 00:02:22,087
using this API everyone and developers
to be able to achieve

37
00:02:22,087 --> 00:02:26,111
simple as well as complex stuff and a
simple task could be something like

38
00:02:27,011 --> 00:02:29,170
playing a sound and running it through
an effect

39
00:02:29,269 --> 00:02:33,313
a complex task can be something as big
as writing an entire audio engine for a

40
00:02:33,709 --> 00:02:34,140
game

41
00:02:34,014 --> 00:02:37,081
we also wanted to simplify real-time
audio

42
00:02:37,081 --> 00:02:40,370
for those of you who are not familiar
with real-time audio

43
00:02:41,099 --> 00:02:45,750
it can be quite challenging you have a
number for on your call backs

44
00:02:45,075 --> 00:02:49,704
every second and for each call back you
have to provide data in a timely fashion

45
00:02:50,379 --> 00:02:53,396
you can do things like cable locks on
the IO thread

46
00:02:53,549 --> 00:02:57,574
a call functions that can block
indefinitely so we make all of this

47
00:02:57,799 --> 00:03:01,700
easier for you to work with by giving
you a real time on your system

48
00:03:01,007 --> 00:03:04,095
but one that %um tracked with in a non
real-time context

49
00:03:05,058 --> 00:03:10,136
features on the new API this is a
full-featured Objective C API said

50
00:03:11,036 --> 00:03:16,043
on you get a real time audio system to
work with meaning that any changes that

51
00:03:16,043 --> 00:03:17,115
you make on any of the blocks

52
00:03:18,015 --> 00:03:21,048
take effect immediately using this API

53
00:03:21,048 --> 00:03:25,140
you will be able to read and right
audiophiles play and record audio

54
00:03:26,004 --> 00:03:29,007
connect different audio processing
blocks together

55
00:03:29,007 --> 00:03:33,186
and then while the engine is running and
audios flowing through the system

56
00:03:33,879 --> 00:03:36,926
you can't act the output of each of
these processing blocks

57
00:03:37,349 --> 00:03:43,410
you'll also be able to implement 3d
audio for games now before we actually

58
00:03:43,959 --> 00:03:46,120
jump into the engines building blocks

59
00:03:46,012 --> 00:03:49,721
I thought I'd give you to sample use
cases to give you a little flavor of

60
00:03:49,829 --> 00:03:51,890
what you'll be able to do using this API

61
00:03:51,089 --> 00:03:55,328
so the first sample use case is a
karaoke application

62
00:03:56,129 --> 00:04:00,290
you have a backing track that's playing
and the user singing along with it

63
00:04:00,029 --> 00:04:03,148
and real-time the output at the
microphone

64
00:04:03,409 --> 00:04:06,453
a spot through a delay which is just a
musical affect

65
00:04:06,849 --> 00:04:11,000
and both the bees audience change a
mixed and sent to the output Harbor

66
00:04:11,000 --> 00:04:15,189
could be speaker headphones let's also
say

67
00:04:15,189 --> 00:04:19,280
that's you tak the outputs at the
microphone and

68
00:04:19,028 --> 00:04:22,112
analyze that raw data CB users on pitch

69
00:04:23,012 --> 00:04:26,094
he's doing great job a few years play
some sound effects

70
00:04:26,094 --> 00:04:29,100
SodaStream also gets mixed n and played
out

71
00:04:30,000 --> 00:04:33,077
the output hardware here's another use
case

72
00:04:33,077 --> 00:04:37,156
you have a streaming application and you
receive data from a remote location

73
00:04:38,056 --> 00:04:41,063
you can now stop this data in two
different buffers

74
00:04:41,063 --> 00:04:45,632
and schedule them on a clear day you
can't run the output at the player

75
00:04:46,199 --> 00:04:49,560
to any Q whose you why you present to
the user

76
00:04:49,056 --> 00:04:52,113
so that they can tweak the EQ based on
their preference

77
00:04:53,013 --> 00:04:57,025
the output a BBQ then goes to the upper
harbour

78
00:04:57,025 --> 00:05:00,110
so these are just two sample use cases
you'll be able to do a whole lot more

79
00:05:01,001 --> 00:05:06,056
once we talk about abe Audioengine for
let's get started

80
00:05:06,065 --> 00:05:09,114
the two main object to going to start
with I V

81
00:05:09,699 --> 00:05:13,761
engine object and the note of che and
that she specific types of nodes

82
00:05:14,319 --> 00:05:17,830
the output node makes unknown and the
piano

83
00:05:17,083 --> 00:05:20,292
we have other nodes as well that will
get to but these are the initial

84
00:05:21,039 --> 00:05:23,067
building block notes

85
00:05:23,319 --> 00:05:26,430
so the engine is an object that
maintains ago of

86
00:05:26,043 --> 00:05:29,056
audio notes you create nodes

87
00:05:29,056 --> 00:05:32,124
and you attach them to the engine and
then use the engine to make connections

88
00:05:33,024 --> 00:05:35,453
between these different audio notes

89
00:05:35,669 --> 00:05:38,930
engine will analyze these connections
and determine

90
00:05:38,093 --> 00:05:43,095
which ones add up to an active chain
when you then start the engine

91
00:05:44,013 --> 00:05:48,044
audio flows through all of the active
change

92
00:05:48,044 --> 00:05:52,060
up of a feature that the engine has is
that it allows you to dynamically

93
00:05:52,006 --> 00:05:53,945
reconfigure these notes

94
00:05:54,539 --> 00:05:58,190
this means that while the engine is
rendering you can add

95
00:05:58,019 --> 00:06:03,148
new nodes and then why the mop and so
essentially a adding or removing chains

96
00:06:03,319 --> 00:06:07,800
dynamically so the typical workflow the
engine

97
00:06:07,008 --> 00:06:10,090
is that you create an instance of the
engine create instances up all the nodes

98
00:06:11,062 --> 00:06:12,109
you want to work with

99
00:06:13,009 --> 00:06:16,053
attach them to the engine so the engines
now aware of them

100
00:06:16,053 --> 00:06:19,062
and then connect them together start the
engine

101
00:06:20,043 --> 00:06:23,682
this will create an active vendor to
read an audio will flow through all of

102
00:06:24,069 --> 00:06:27,690
the active change

103
00:06:27,069 --> 00:06:30,828
so let's not talk about a note unknown
is a basic

104
00:06:31,449 --> 00:06:34,690
on your block and we have three types
and notes

105
00:06:34,069 --> 00:06:37,088
that a source node which one knows but
generate audio

106
00:06:37,088 --> 00:06:40,165
examples abyss other player on the input
no

107
00:06:41,065 --> 00:06:45,394
you have notes that process audio so
they take some audio and do something to

108
00:06:45,979 --> 00:06:46,410
it

109
00:06:46,041 --> 00:06:49,300
and push it up and examples of this our
mixer

110
00:06:49,669 --> 00:06:52,810
are in effect you also have destination
nodes

111
00:06:52,081 --> 00:06:55,138
that receive audio and do something with
it

112
00:06:56,038 --> 00:07:00,121
every one of these notes has a certain
number of important out but bus

113
00:07:01,021 --> 00:07:07,160
I and typically you see that most notes
have a single input and output bus

114
00:07:07,349 --> 00:07:11,650
but an exception this is a mixture known
that has multiple input buses

115
00:07:11,065 --> 00:07:14,099
and a single up a bus every but

116
00:07:14,099 --> 00:07:17,175
now has an audio data format Associated

117
00:07:18,075 --> 00:07:21,144
so let's talk about connections

118
00:07:21,819 --> 00:07:25,970
if you have a connection between a
source node and a destination node

119
00:07:25,097 --> 00:07:28,106
that forms an active chain you can
insert

120
00:07:29,006 --> 00:07:33,455
any number processing notes between the
source node and the definition not

121
00:07:33,509 --> 00:07:36,750
but as long as you why %uh every bit up
this chain up

122
00:07:36,075 --> 00:07:40,464
it's an active chain as soon as you
break one of the connections

123
00:07:41,139 --> 00:07:44,530
all the notes that I upstream of the
point disconnection

124
00:07:44,053 --> 00:07:48,075
going to an inactive state in this case
a broken the connection

125
00:07:48,075 --> 00:07:52,080
between the processing node and the
destination node so my processing known

126
00:07:52,008 --> 00:07:53,012
and my source known

127
00:07:53,084 --> 00:07:59,093
I'm now in an inactive state the same
holds true in this example

128
00:08:00,074 --> 00:08:03,093
so let's now look at the specific no
types

129
00:08:03,759 --> 00:08:06,970
the first know that we're going to talk
about is the output node

130
00:08:06,097 --> 00:08:10,476
the engine has an implicit destination
node and it's called the output no

131
00:08:11,349 --> 00:08:15,180
and the role in the output node is to
take up the data that it receives

132
00:08:15,018 --> 00:08:19,044
and hand it to the output hot this could
be the speaker

133
00:08:19,044 --> 00:08:22,113
you cannot create a stand-alone and soon
to be out but no

134
00:08:22,509 --> 00:08:27,550
you have to get it from the incident to
be engine let you create a

135
00:08:27,055 --> 00:08:30,764
let's move on to the mixer no make some
notes

136
00:08:31,259 --> 00:08:35,720
a processing notes and they receive data
on different input bosses

137
00:08:35,072 --> 00:08:40,451
which he then makes to a single out but
which goes out on the output bus

138
00:08:41,099 --> 00:08:45,680
when you use a mixer you get control
over the wall %um of each input bus

139
00:08:45,068 --> 00:08:48,075
and he had an application that was
playing a number of sounds

140
00:08:48,075 --> 00:08:51,141
and you put each of the sounds in on a
separate input bus

141
00:08:52,041 --> 00:08:56,053
using this volume control you can
essentially blend in the amount to be

142
00:08:56,053 --> 00:09:00,062
sound but you wanna hear so you create a
mix

143
00:09:00,062 --> 00:09:03,096
you not have control over the output
volume

144
00:09:03,096 --> 00:09:06,104
as well using a mixer so you're
controlling the volume

145
00:09:07,004 --> 00:09:10,011
the mix that you created

146
00:09:10,011 --> 00:09:13,049
if your application has several
categories of sounds

147
00:09:13,049 --> 00:09:18,056
you can make you some concept called sub
mixing to create some mixes

148
00:09:18,056 --> 00:09:21,112
so let's say that you have some UI
sounds and you have some music

149
00:09:22,012 --> 00:09:26,070
and you put all the UI sounds 21 mixer I
love the music to another mixer

150
00:09:26,007 --> 00:09:29,075
using the output volumes have each of
these mixers you can essentially control

151
00:09:30,038 --> 00:09:30,045
the volume up

152
00:09:31,008 --> 00:09:35,036
each of the sub mixes let's take that
concept a stepfather

153
00:09:35,036 --> 00:09:39,063
and put all the sub mixes through a
monster Mixr

154
00:09:39,063 --> 00:09:42,124
the output volume up the masa mixer with
essentially control

155
00:09:43,024 --> 00:09:47,046
the volume to be in time mix in your
application

156
00:09:47,046 --> 00:09:51,049
now the engine has an implicit mixer no
and when you off the engine

157
00:09:51,076 --> 00:09:54,122
for its mixer node it creates an
instance of a mixer

158
00:09:55,022 --> 00:09:58,078
creates an instance of the output node
and connected together for you by

159
00:09:58,078 --> 00:09:59,131
default

160
00:10:00,031 --> 00:10:03,031
the difference here between the mix
unknown and the output known

161
00:10:03,031 --> 00:10:06,107
is that you can create additional
instances and then attach them to the

162
00:10:07,007 --> 00:10:07,059
engine

163
00:10:07,059 --> 00:10:11,118
and use them how you please mixtures can
also have

164
00:10:12,018 --> 00:10:16,019
different audio data formats for each
input bus

165
00:10:16,019 --> 00:10:19,100
and the mixer will do the work of
efficiently converting

166
00:10:20,000 --> 00:10:25,043
the input data formats to the output
data format

167
00:10:25,043 --> 00:10:28,081
so now that we look at these initial
notes

168
00:10:28,081 --> 00:10:31,090
let's not talk about how this works in
the context of the engine

169
00:10:32,071 --> 00:10:35,130
so let's say that I have a nap that
creates an instance of the engine

170
00:10:36,003 --> 00:10:39,060
I can now of the engine for its main mix
or node

171
00:10:39,087 --> 00:10:42,184
so it's gonna create instanceof the
mixer can instanceof the output node

172
00:10:43,084 --> 00:10:47,143
and connect the two together I can now
create a player node

173
00:10:48,043 --> 00:10:51,116
and attach it to the engine and
connected to the mixer

174
00:10:52,016 --> 00:10:55,078
so at this point I have a connection
chain going all the way from a source to

175
00:10:55,078 --> 00:10:56,112
a destination

176
00:10:57,012 --> 00:11:01,085
so I have an active chain when I then
start up the engine

177
00:11:01,085 --> 00:11:05,167
an active render thread is created a and
data is pulled by the destination

178
00:11:06,067 --> 00:11:09,070
so I have an active flow day to him

179
00:11:09,097 --> 00:11:12,174
the app can now in track with each one
of these blocks

180
00:11:13,074 --> 00:11:19,089
and any change that makes on any of the
notes will take effect immediately

181
00:11:19,089 --> 00:11:22,100
so now that we've talked about an active
render

182
00:11:23,000 --> 00:11:26,028
red how do you push you on your data

183
00:11:26,028 --> 00:11:30,060
on that end up thread you use a player
to do that

184
00:11:30,006 --> 00:11:34,033
let's look at player notes clear nodes
on notes that can play date up from

185
00:11:34,087 --> 00:11:34,185
files

186
00:11:35,085 --> 00:11:38,104
and from bob Foose and the way that it
happens

187
00:11:39,004 --> 00:11:43,028
by the way that it's done is by
scheduling events which simply means

188
00:11:43,028 --> 00:11:46,059
play data at a specified time that data

189
00:11:46,059 --> 00:11:50,116
at that time could be now are some time
in the future

190
00:11:51,016 --> 00:11:55,088
when your scheduling buffers you can
schedule I to multiple buffers

191
00:11:55,088 --> 00:11:59,153
and as each boffo is consumed by the
clear you get an individual call back

192
00:12:00,053 --> 00:12:04,151
which you can then use as a cue to go
ahead and schedule more day

193
00:12:05,051 --> 00:12:09,107
you can also schedule a single buffer
that plays in a loop fashion

194
00:12:10,007 --> 00:12:13,011
and this is useful in the case when you
may have a music loop

195
00:12:13,011 --> 00:12:16,049
are sound effect that you wanna play
over and over again

196
00:12:16,049 --> 00:12:20,101
so you load the data and then you play
the buffer and it'll continue to play

197
00:12:21,001 --> 00:12:24,043
until you stopped the player are you in
shopping

198
00:12:24,043 --> 00:12:27,089
with another buffer we'll get into that

199
00:12:27,089 --> 00:12:32,098
you can also schedule a file or a
portion of a file called a segment

200
00:12:32,098 --> 00:12:35,152
so going back to a previous diagram we
had an engine that was in the running

201
00:12:36,052 --> 00:12:37,063
state

202
00:12:37,063 --> 00:12:41,098
to now I can create an instance of a
bottle and load my data into it

203
00:12:41,098 --> 00:12:44,123
shown by the red at all want to do that

204
00:12:45,023 --> 00:12:48,062
I can schedule the spot for on the
player

205
00:12:48,062 --> 00:12:51,153
and when the players playing the play
over consume the data

206
00:12:52,053 --> 00:12:56,086
in the buffer and push it on the end the
threat

207
00:12:56,086 --> 00:12:59,094
in a similar manner I can work with
multiple buffers

208
00:12:59,094 --> 00:13:03,099
so over here have multiple buffers I
loaded onto each one of them

209
00:13:04,044 --> 00:13:07,058
and I schedule each one of them to play
in sequence

210
00:13:07,058 --> 00:13:10,059
on the player as each bottle

211
00:13:10,068 --> 00:13:13,114
is consumed by the playah I get
individual call backs

212
00:13:14,014 --> 00:13:17,083
letting me know that buffers done I can
use that as a cue

213
00:13:17,083 --> 00:13:20,092
and schedule more data

214
00:13:21,073 --> 00:13:24,094
in a similar manner you can work with
the file

215
00:13:24,094 --> 00:13:27,117
and a difference here is that you don't
have to actually deal with the audio

216
00:13:28,017 --> 00:13:29,062
data yourself

217
00:13:29,062 --> 00:13:32,069
all you need is a URL to a physical
audiophile

218
00:13:33,032 --> 00:13:36,034
with which you can create an AV audio
file object

219
00:13:36,052 --> 00:13:39,148
and then schedule that directly on the
player the player will do the work

220
00:13:40,048 --> 00:13:45,090
of reading data from the file and
pushing and on that and interim

221
00:13:45,009 --> 00:13:50,022
so let's now look according sample of
how we can achieve this

222
00:13:51,003 --> 00:13:54,004
I first created an instance be engine

223
00:13:54,004 --> 00:13:57,032
create an instance of a clear and attach
the player

224
00:13:57,032 --> 00:14:00,130
the engine so the engines now where the
player

225
00:14:01,003 --> 00:14:04,007
I'm not going to split my example out
and show how you can first work with the

226
00:14:04,007 --> 00:14:05,035
file

227
00:14:05,098 --> 00:14:09,152
so given are you are owed to an audio
file I can create an AV audio file

228
00:14:10,052 --> 00:14:11,135
object

229
00:14:12,035 --> 00:14:16,039
the next thing that I do is of the
engine for its main mixer

230
00:14:16,075 --> 00:14:20,107
so the engine will create an instance of
a mixer node create an output node

231
00:14:21,007 --> 00:14:24,038
and connect the two together I can now
go ahead

232
00:14:24,038 --> 00:14:27,039
and connect the player to the mixer

233
00:14:27,039 --> 00:14:30,131
with the files processing format so I
have a connection chain going all the

234
00:14:31,031 --> 00:14:31,088
way from

235
00:14:31,088 --> 00:14:36,115
clear that the source to the output node
that a destination

236
00:14:37,015 --> 00:14:40,103
now I can schedule my file to play at
time new

237
00:14:41,003 --> 00:14:45,026
which is as soon as possible and in this
case I pass a nose for the completion

238
00:14:45,026 --> 00:14:46,048
handler

239
00:14:46,048 --> 00:14:49,097
if I had some work that needed to be
done after the file has consumed by the

240
00:14:49,097 --> 00:14:49,146
player

241
00:14:50,046 --> 00:14:53,068
I can pass on a block here

242
00:14:53,068 --> 00:14:56,164
so in a similar manner I can work with
the buffer as well

243
00:14:57,064 --> 00:15:00,072
let's say that I create an AV audio PCM
buffer object

244
00:15:01,044 --> 00:15:04,056
and lows some data into it the specifics

245
00:15:04,056 --> 00:15:07,137
up that part a covered in Section 501 so
if you missed that police

246
00:15:08,037 --> 00:15:12,044
I refer to that session want to have my
buffer object

247
00:15:12,044 --> 00:15:15,130
I can go ahead not the engine for its
mixer and make the connection between

248
00:15:16,003 --> 00:15:17,022
the player

249
00:15:17,049 --> 00:15:20,120
to the mixer with the buffers format

250
00:15:21,002 --> 00:15:24,015
now I can go ahead and schedule this
buffer

251
00:15:24,033 --> 00:15:27,062
at time new soon as possible

252
00:15:27,062 --> 00:15:31,079
but note that we have an additional
argument when we're working with buffers

253
00:15:31,079 --> 00:15:34,175
the auctions argument we're gonna talk
about that right after this

254
00:15:35,075 --> 00:15:40,124
but for now I'm gonna pass new and no
for the completion handler as well

255
00:15:41,024 --> 00:15:45,058
so now that I've schedule my data on the
player I can go ahead and start the

256
00:15:45,058 --> 00:15:45,150
engine

257
00:15:46,005 --> 00:15:50,063
this creates an active vendetta red and
then called play on the play

258
00:15:51,008 --> 00:15:54,045
and the player will do the work up
reading the data from the file in the

259
00:15:54,045 --> 00:15:54,103
buffer

260
00:15:55,003 --> 00:15:58,078
and pushing it on that and it said so
let's not talk

261
00:15:58,078 --> 00:16:02,145
about the different buffer scheduling
options

262
00:16:03,045 --> 00:16:06,056
in all of the examples and I'm going to
talk about now

263
00:16:06,056 --> 00:16:09,065
I'm going to specify new for the at time

264
00:16:09,065 --> 00:16:12,070
argument and that just means that in all
these examples

265
00:16:13,015 --> 00:16:16,068
I'm going to schedule something to play
as soon as possible

266
00:16:16,068 --> 00:16:20,089
so let's talk about the first option and
that's when you want to schedule a

267
00:16:20,089 --> 00:16:22,151
buffer to play as soon as possible

268
00:16:23,051 --> 00:16:27,053
in that case all you need to do is our
schedule a buffer

269
00:16:27,071 --> 00:16:30,087
with the option set to net you call a
play on the player

270
00:16:30,087 --> 00:16:34,165
and that buffer gets played a if you
have a buffer that's playing now

271
00:16:35,065 --> 00:16:39,138
and you want to append a new buffer it's
the exact same call

272
00:16:40,038 --> 00:16:43,099
you schedule the new buffer with the
option set to know

273
00:16:43,099 --> 00:16:47,105
and so the new buffer get appended can
to the queue of currently playing

274
00:16:48,005 --> 00:16:49,096
buffers

275
00:16:49,096 --> 00:16:52,141
on the other hand if I want to in shop

276
00:16:53,041 --> 00:16:56,057
my currently playing buffer with a new
buffer

277
00:16:56,057 --> 00:16:59,114
I can schedule the new buffer with the
AV audio player node

278
00:17:00,014 --> 00:17:04,086
buffer in trucks option so that well in
shop the country playing buffer

279
00:17:04,086 --> 00:17:07,685
and start playing my new bottle right
away

280
00:17:08,459 --> 00:17:11,547
let's now look at the different variants
with a looping buffer

281
00:17:12,339 --> 00:17:15,510
so like I said earlier if I have a
buffer that to be played in the loop

282
00:17:15,051 --> 00:17:15,113
fashion

283
00:17:16,013 --> 00:17:19,202
like a sound effect for instance I can
load the data

284
00:17:19,319 --> 00:17:23,420
in that buffer and schedule that buffer
with the AV audio player known

285
00:17:23,042 --> 00:17:26,104
of the loops option when I call play on
the player

286
00:17:27,004 --> 00:17:30,013
that buffer stops to play in a loop
fashion

287
00:17:30,094 --> 00:17:33,167
if I wanna in shop a looping buffer

288
00:17:34,067 --> 00:17:37,086
it's the same auction as what we've seen
before

289
00:17:37,086 --> 00:17:40,090
I have to schedule a new buffer with the
AP audio player note

290
00:17:41,026 --> 00:17:45,039
buffer in traps option so essentially
it's the same option

291
00:17:45,039 --> 00:17:48,056
for when you want to interrupt a regular
buffer

292
00:17:48,056 --> 00:17:51,059
or a looping Buffalo

293
00:17:51,086 --> 00:17:55,138
the last case in an interesting one so
if you have a looping buffer

294
00:17:56,038 --> 00:18:00,052
but you want to let the current loop
finish before you start playing

295
00:18:00,052 --> 00:18:03,151
your new data you can schedule your new
buffer

296
00:18:04,051 --> 00:18:09,060
with the AV audio player node but her in
shops at loop option

297
00:18:09,006 --> 00:18:12,017
so this will let the current loop finish

298
00:18:12,071 --> 00:18:17,078
and as soon as that loop is done the new
buffer starts playing

299
00:18:18,041 --> 00:18:21,126
now that was a whole bunch of options
let's look and one practical example of

300
00:18:22,026 --> 00:18:24,047
how we can use these options

301
00:18:24,047 --> 00:18:27,078
so let's say that I have a sound that's
broken up into three parts

302
00:18:27,078 --> 00:18:30,096
and example I'm gonna use your is a site
in

303
00:18:30,096 --> 00:18:33,191
so you have the initial build up at the
sound which is the attack portion of the

304
00:18:34,091 --> 00:18:35,132
site

305
00:18:36,032 --> 00:18:40,033
you have the drawing portion of the site
and which can be modeled using just a

306
00:18:40,042 --> 00:18:41,083
looping buffer

307
00:18:41,083 --> 00:18:45,090
and this is the sustaining portion of
the sound and then you have the dying

308
00:18:45,009 --> 00:18:46,038
down at the siren

309
00:18:47,019 --> 00:18:50,063
which is the release portion up what's
up so let's say that I load up

310
00:18:50,063 --> 00:18:53,097
each of these I sounds in two different
buffers

311
00:18:53,097 --> 00:18:56,116
the way that I can implement this in
code

312
00:18:57,016 --> 00:19:01,105
is to push schedule the attack before
with my options at No

313
00:19:02,005 --> 00:19:06,072
and then schedule the sustained offer
with the AV audio player note

314
00:19:06,072 --> 00:19:10,076
behold loops option so when I called
play on the player

315
00:19:10,076 --> 00:19:13,143
what this'll do display the attack
portion of the sound

316
00:19:14,043 --> 00:19:18,057
and then immediately start playing the
sustain portion of the sound

317
00:19:18,057 --> 00:19:21,150
and continue to loop that sustain buffer
and that goes on

318
00:19:22,005 --> 00:19:26,028
until I'm ready to inch up to after some
time has gone by

319
00:19:26,073 --> 00:19:29,167
and I'm ready to inch up that I can
schedule my released by her

320
00:19:30,067 --> 00:19:34,070
with the eighty audio player node buffer
in shops & Lube option

321
00:19:34,097 --> 00:19:37,123
so this will let the Los Lupes up to
sustain buffer

322
00:19:38,023 --> 00:19:45,023
finish up and then play the release
portion of my son

323
00:19:45,037 --> 00:19:48,060
I remember that I said in the beginning
that all of my examples

324
00:19:48,006 --> 00:19:51,021
involved scheduling events to play as
soon as possible

325
00:19:51,075 --> 00:19:54,081
well I can also schedule events to play
in the future

326
00:19:54,081 --> 00:19:58,081
so here's an example of that in this
case I'm just going to schedule

327
00:19:58,081 --> 00:20:01,164
a buffer to play 10 seconds in the
future so I create

328
00:20:02,064 --> 00:20:06,146
and AB on your time object that has a
Tampa a relative sample time

329
00:20:07,046 --> 00:20:10,074
10 seconds in the future and I use the
buffer sample rate

330
00:20:10,074 --> 00:20:13,140
as my reference point I can now schedule
the buffer

331
00:20:14,004 --> 00:20:18,073
with this AV audio time object and
called play on the play

332
00:20:19,009 --> 00:20:24,084
and my buffer gets played 10 seconds in
the future

333
00:20:24,084 --> 00:20:27,108
all right so we've talked about player
notes

334
00:20:28,008 --> 00:20:32,009
and how you can use a player to push you
on your data

335
00:20:32,018 --> 00:20:36,069
on that ended today well if you want to
pull data from the end it right

336
00:20:36,069 --> 00:20:39,086
how do you do that you use a note app

337
00:20:39,086 --> 00:20:42,153
and here are some reasons for why you
may want to do that

338
00:20:43,053 --> 00:20:46,058
let's say you want to capture the output
at the microphone

339
00:20:46,058 --> 00:20:49,092
and save that data to disk or arm

340
00:20:49,092 --> 00:20:52,118
if you have a music application and you
wanna record in life

341
00:20:53,018 --> 00:20:57,021
of arms or if you have a game and you
want to capture the output makes

342
00:20:57,048 --> 00:21:00,119
the game you can do all of that using a
note at

343
00:21:01,019 --> 00:21:04,098
and what that is inthe essentially a tap
that you install

344
00:21:04,098 --> 00:21:09,129
on the output bus of a node to the data
that's captured by the tap

345
00:21:10,029 --> 00:21:14,105
his return back to application me a call
back lock

346
00:21:15,005 --> 00:21:18,007
to going back to a familiar diagram I
have two players

347
00:21:18,007 --> 00:21:21,053
that's connected to the engines main
mixer and I want to tap

348
00:21:21,053 --> 00:21:25,055
the output up the mixer so I can install
a tap on the mixer

349
00:21:25,073 --> 00:21:28,099
and the top will start pulling data from
the end at Red

350
00:21:28,099 --> 00:21:31,188
I can then go ahead at that but Apple
then go ahead

351
00:21:32,088 --> 00:21:36,117
and create a buffer object stuff that
data into the buffer

352
00:21:37,017 --> 00:21:41,078
and return that back to the application
be a call back block

353
00:21:41,078 --> 00:21:44,135
in code it's just one function call

354
00:21:45,035 --> 00:21:49,080
you install attack on the mixers output
bus

355
00:21:49,008 --> 00:21:54,087
0 with a buffer size of 4096 frames

356
00:21:55,059 --> 00:21:59,107
and the mixers output format for that
bus

357
00:22:00,007 --> 00:22:03,094
within the bloc have an AV audio PCM
buffer that contains

358
00:22:03,094 --> 00:22:07,161
that much I'm on a data and I can do
whatever I need to do with that data

359
00:22:08,061 --> 00:22:11,148
all right so the quick a summarized you
have an active vendetta red

360
00:22:12,048 --> 00:22:16,050
you use clear notes to push you on your
data on that end the threat

361
00:22:16,005 --> 00:22:20,080
and use no taps to pull on your data
from the end it right

362
00:22:21,025 --> 00:22:24,041
let's not switch gears and talk about a
new node

363
00:22:24,041 --> 00:22:27,042
call the input node the input node

364
00:22:27,051 --> 00:22:32,059
receives data from the input hardware
and its battle to the output node

365
00:22:32,059 --> 00:22:35,094
with the input node you cannot create a
stand-alone instance

366
00:22:35,094 --> 00:22:39,126
you have to get the instance from the
engine

367
00:22:40,026 --> 00:22:44,053
arm when you've connected the input node
in an active chain

368
00:22:44,053 --> 00:22:47,130
and the engine is running data is pulled

369
00:22:48,003 --> 00:22:51,096
from the input nope so let's go back to
a familiar diagram

370
00:22:52,023 --> 00:22:55,071
I've connected the input node to the
mixer note

371
00:22:55,071 --> 00:22:59,098
and that connect the output gap so when
I start the engine

372
00:22:59,098 --> 00:23:03,191
this is an active chain and data is
pulled from the input node

373
00:23:04,091 --> 00:23:09,094
so if I'm receiving data from the input
node and the engine is running

374
00:23:10,021 --> 00:23:14,047
and I want to stop receiving data at a
certain point how do I do that

375
00:23:14,047 --> 00:23:18,146
it's very simple all you have to do how
I'm so I I raced ahead

376
00:23:19,046 --> 00:23:22,109
let's look at a code example of how you
can connect the input node

377
00:23:23,009 --> 00:23:26,014
so I get the input notes from the engine

378
00:23:26,014 --> 00:23:31,039
just make a connection to any other note
with the input no its hardware format

379
00:23:31,039 --> 00:23:34,097
and then start the engine this creates
an active and it read

380
00:23:34,097 --> 00:23:38,116
and the input notes posed for data like
I was saying earlier

381
00:23:39,016 --> 00:23:43,022
if you have an input node that's being
pulled and you don't receive data

382
00:23:43,022 --> 00:23:44,096
anymore from the input node

383
00:23:44,096 --> 00:23:47,158
what you do just disconnect the input
node

384
00:23:48,058 --> 00:23:51,137
so the input node will no longer be an
active chain

385
00:23:52,037 --> 00:23:55,100
and in one report for data in order to
do that

386
00:23:56,000 --> 00:23:59,004
is just one line of code using the
Indian

387
00:23:59,004 --> 00:24:05,091
you disconnect note output up the input
node

388
00:24:05,091 --> 00:24:09,125
now if you want to capture data from the
input node you can install a note to

389
00:24:10,025 --> 00:24:13,110
and we've talked about that but what's
interesting about this particular

390
00:24:14,001 --> 00:24:14,078
example

391
00:24:14,087 --> 00:24:17,092
is if I wanted to work with chest be
input node

392
00:24:18,037 --> 00:24:22,038
sagesse capture data from the microphone
and maybe examine it

393
00:24:22,047 --> 00:24:25,078
analyze it and real-time on may be right
now to file

394
00:24:25,078 --> 00:24:28,171
I can't directly install a top on the
input node

395
00:24:29,071 --> 00:24:32,153
and attack will do the work of pulling
the input not for data

396
00:24:33,053 --> 00:24:37,065
stuffing it in buffers and then turning
that back to the application

397
00:24:37,065 --> 00:24:43,065
once you have that data you can do
whatever you need to do with it

398
00:24:43,065 --> 00:24:47,071
and let's not talk about the last type
up notes in this section

399
00:24:48,025 --> 00:24:52,082
effect notes effect known on notes that
process data

400
00:24:52,082 --> 00:24:56,119
so depending on the type of affect the
take some amount of data in

401
00:24:57,019 --> 00:25:00,071
the process it and push that date out

402
00:25:00,071 --> 00:25:04,148
we have to main categories a perfect you
have AVR unit effects

403
00:25:05,048 --> 00:25:08,050
and AV audio net time affects

404
00:25:08,068 --> 00:25:12,121
so what's the difference between to AB
or do you need a fax

405
00:25:13,021 --> 00:25:16,023
and acquired the same amount of data on
input

406
00:25:16,041 --> 00:25:19,059
at the Amman update out there being us
to provide

407
00:25:19,059 --> 00:25:22,098
so let's take the example of a
distortion

408
00:25:22,098 --> 00:25:25,107
effect if a distortion no one has to
provide

409
00:25:26,088 --> 00:25:30,186
24 milliseconds about but all it needs
is 24 milliseconds have been part

410
00:25:31,086 --> 00:25:34,285
that it then processes and pushes out

411
00:25:35,059 --> 00:25:39,680
as opposed to that time affects don't
have that constraint

412
00:25:39,068 --> 00:25:42,076
so let's say that you have a time affect
that's doing some amount of time

413
00:25:42,076 --> 00:25:42,875
stretching

414
00:25:43,559 --> 00:25:46,700
if it is being asked to provide 24 min
the second

415
00:25:46,007 --> 00:25:50,073
output it may require forty-eight
milliseconds have input

416
00:25:51,036 --> 00:25:54,110
so that brings me to my second point it
is for that reason

417
00:25:55,001 --> 00:25:58,033
why you cannot connect a time effect
directly

418
00:25:58,042 --> 00:26:02,073
with the input node because when you
have the input node running and

419
00:26:02,073 --> 00:26:03,080
real-time

420
00:26:03,008 --> 00:26:06,100
it cannot provide data that it doesn't
happen

421
00:26:07,072 --> 00:26:10,079
as opposed to that with a Dr unit
affects

422
00:26:10,079 --> 00:26:13,178
you can connect them anyway and the
chain so you can use them with players

423
00:26:14,078 --> 00:26:19,096
or you can use them with the input No

424
00:26:19,096 --> 00:26:26,096
these are the list of the fact that we
currently have available

425
00:26:29,077 --> 00:26:32,095
arm it's on the effects side we have the
delay distortion

426
00:26:32,095 --> 00:26:36,109
EQ and reverb sure musician you're
probably already familiar with these

427
00:26:37,009 --> 00:26:37,015
effects

428
00:26:37,069 --> 00:26:41,108
so you can use them and real-time I use
them but the player arm

429
00:26:42,008 --> 00:26:45,079
and on the time effects i'd we have the
baby speed and the time pitch

430
00:26:45,079 --> 00:26:49,117
and these effects are useful in cases
where you want to manipulate the amount

431
00:26:50,017 --> 00:26:51,017
of time stretching

432
00:26:51,017 --> 00:26:54,025
maybe the pitch the source content so
let's say that you have

433
00:26:54,097 --> 00:26:57,189
a speech file that you're playing and
you want to pitch the Y sup

434
00:26:58,089 --> 00:27:01,111
to sound like a chipmunk well you could
do that

435
00:27:02,011 --> 00:27:06,066
using wanna peacetime fix so let's now
look

436
00:27:06,066 --> 00:27:10,112
an example how you can use one of these
affect in this example I'm gonna make

437
00:27:11,012 --> 00:27:11,064
use

438
00:27:11,064 --> 00:27:14,140
a BBQ but note that over here

439
00:27:15,004 --> 00:27:18,087
I've connected the EQ directly to the
output node

440
00:27:19,023 --> 00:27:23,044
in all of my prying samples I was
connecting

441
00:27:23,044 --> 00:27:26,102
and notes to the mixers to be engines
mixer known

442
00:27:27,002 --> 00:27:31,005
but I don't always have to do that if I
just have one

443
00:27:31,005 --> 00:27:34,021
chain AppData in my application

444
00:27:34,021 --> 00:27:37,062
and I can just directly connected to the
output known which is what I've done

445
00:27:37,062 --> 00:27:37,106
here

446
00:27:38,006 --> 00:27:42,062
so AR this is a multi-bank

447
00:27:42,062 --> 00:27:46,123
EQ and I specified the number of banned
from going to use when I create an

448
00:27:47,023 --> 00:27:48,024
instance a BBQ

449
00:27:48,033 --> 00:27:52,129
so over here I'm going to use too bad so
I create an EQ two bands

450
00:27:53,029 --> 00:27:56,036
I can then go ahead and get access to
each other bands

451
00:27:56,099 --> 00:28:03,099
and set up the different filter
parameters connecting the EQ

452
00:28:04,002 --> 00:28:08,004
is no different from what we've already
seen I can connect the player

453
00:28:08,022 --> 00:28:12,074
to the EQ with the files processing
format and connect the EQ

454
00:28:12,074 --> 00:28:15,081
the engine's output node with the same
format and that said

455
00:28:16,044 --> 00:28:19,062
so with all this information

456
00:28:19,062 --> 00:28:22,137
let's look at them all that makes use of
some other notes that brief talk about

457
00:28:23,037 --> 00:28:24,086
okay

458
00:28:24,086 --> 00:28:28,167
someone explain what I have here well
here I have to clear notes

459
00:28:29,067 --> 00:28:32,072
and each of these players is going to be
fed by a separate

460
00:28:33,017 --> 00:28:37,058
by separate looping buffers each other
players

461
00:28:37,058 --> 00:28:41,084
are connected to separate effects and
each of these affects

462
00:28:41,084 --> 00:28:44,089
a connected two separate inputs up the
engines main mixer

463
00:28:45,034 --> 00:28:48,079
I have control over the output volume

464
00:28:48,079 --> 00:28:51,172
up the main mixer and down here

465
00:28:52,072 --> 00:28:56,161
I have a transport control which
essentially controls a note

466
00:28:57,061 --> 00:29:01,127
tap that I've installed on the main
mixer so when I hit record

467
00:29:02,027 --> 00:29:06,030
atop gets installed and I capture that
data and save it to a file

468
00:29:06,003 --> 00:29:09,099
and then when I had play I'm just gonna
play that file black

469
00:29:10,026 --> 00:29:16,062
so let's listen to what the sounds like
so the

470
00:29:16,062 --> 00:29:19,118
sure I am playing the drums I can change
the volume

471
00:29:20,018 --> 00:29:23,046
and the pan of each player

472
00:29:23,046 --> 00:29:27,103
taken here that effect

473
00:29:28,003 --> 00:29:35,003
now gonna go ahead and played the reverb
a little bit sounds a little too

474
00:29:35,028 --> 00:29:42,028
someone keeping about here let me start
the other player

475
00:29:45,011 --> 00:29:48,086
okay so what i thought i do now is used
the note app

476
00:29:48,086 --> 00:29:51,109
to maybe capture a little life
performance

477
00:29:52,009 --> 00:29:55,078
and any changes that I make to any of
the notes here

478
00:29:55,159 --> 00:29:58,860
should be captured in that performance
so when we go back and listen to that

479
00:29:58,086 --> 00:30:05,086
we should hear that let me do that

480
00:30:15,024 --> 00:30:21,963
good

481
00:30:22,179 --> 00:30:22,214
K

482
00:30:22,529 --> 00:30:25,582
some gonna stop my recording stop
mightily

483
00:30:26,059 --> 00:30:33,059
there and let's go back and listen to
the recording

484
00:30:43,028 --> 00:30:50,028
good

485
00:30:51,063 --> 00:30:52,087
and that's a preview

486
00:30:52,087 --> 00:30:55,159
of AB Audioengine action go back

487
00:30:56,059 --> 00:31:00,135
slides alright so to have the settings
that I was changing

488
00:31:01,035 --> 00:31:04,070
on with the players well the volume

489
00:31:04,007 --> 00:31:08,049
and the pan for each player but these
are actually settings

490
00:31:09,012 --> 00:31:13,069
be of the input mixer bus at the players
connected to

491
00:31:13,069 --> 00:31:17,788
so the wave weave exposed mixer input
bus settings

492
00:31:18,409 --> 00:31:21,433
in the AM maybe Audioengine is through a
protocol

493
00:31:21,649 --> 00:31:24,726
Cali if the audio mixing protocol source
nodes

494
00:31:25,419 --> 00:31:29,130
conform to this protocol so the player
node and the input node

495
00:31:29,013 --> 00:31:32,032
do that and settings like volume

496
00:31:32,032 --> 00:31:35,095
you can change by just doing cleared of
volume equals .5

497
00:31:35,095 --> 00:31:41,424
a player not ban equals -1 when a source
node is an active connection

498
00:31:42,279 --> 00:31:46,700
with the mixer and you make change it
changes to the protocols different

499
00:31:46,007 --> 00:31:46,736
properties

500
00:31:47,429 --> 00:31:51,454
they take effect immediately however if
a source node

501
00:31:51,679 --> 00:31:55,701
not connected to a mixer and you make
changes to the protocols properties

502
00:31:55,899 --> 00:31:59,240
those changes I cashed in the source
node

503
00:31:59,024 --> 00:32:02,213
and then applied when you make a
physical connection

504
00:32:02,429 --> 00:32:07,850
to a mixer so these are the mixing
properties that we have available

505
00:32:07,085 --> 00:32:10,544
under the common mixing properties we
just have all you right now

506
00:32:11,309 --> 00:32:14,345
under the stadium mixing properties we
have pan

507
00:32:14,669 --> 00:32:17,750
and we have a number of 3-d mixing
properties

508
00:32:17,075 --> 00:32:21,104
that we're gonna look at in the next
section so

509
00:32:21,779 --> 00:32:24,855
inform diagram let's say that I have
play 01 connected

510
00:32:25,539 --> 00:32:29,720
to make someone and I go ahead and set
play 01 start pan

511
00:32:29,072 --> 00:32:33,147
to -1 heart pendant the latter and clear
ones volume 2.5

512
00:32:34,047 --> 00:32:37,616
so these mixing settings I'm now

513
00:32:38,039 --> 00:32:42,350
Associated with play one and because
play once connected to mix 01

514
00:32:42,035 --> 00:32:46,464
they also get applied on the mixer if I
were to disconnect

515
00:32:46,779 --> 00:32:50,950
play one and connected to make sis to
these mixing settings

516
00:32:50,095 --> 00:32:53,174
travel along with play 01 and get
applied

517
00:32:54,029 --> 00:32:58,033
to make sure to so in this sense we've
been able to

518
00:32:58,429 --> 00:33:01,870
catty settings that belong to input
possible mixer

519
00:33:01,087 --> 00:33:07,109
along with the source node itself
alright

520
00:33:08,009 --> 00:33:11,096
so let's now move on to the next section
on gaming and 3d audio

521
00:33:11,096 --> 00:33:15,685
so in games typically you have

522
00:33:16,549 --> 00:33:19,960
several types of songs that you play you
have short sons

523
00:33:19,096 --> 00:33:23,915
and we've seen audio services which is
one of us capi skid use for that

524
00:33:24,779 --> 00:33:28,791
for playing music we see if the audio
player

525
00:33:28,899 --> 00:33:32,470
getting used a lot and for sounds that
need to be specialized

526
00:33:32,047 --> 00:33:37,376
opening hours the API of choice now
while each of these APIs

527
00:33:37,799 --> 00:33:42,190
worked really well for what they were
designed for if your application has to

528
00:33:42,019 --> 00:33:42,468
make

529
00:33:42,639 --> 00:33:47,639
use of all of them ban wanna biggest
trade-offs that you have to familiarize

530
00:33:47,639 --> 00:33:49,220
yourself for the nomenclature

531
00:33:49,022 --> 00:33:52,841
Associated with each API in addition

532
00:33:53,039 --> 00:33:56,850
with on your services you don't have a
latency can t help when your sound will

533
00:33:56,085 --> 00:33:56,544
play

534
00:33:57,309 --> 00:34:01,620
with AV audio player you can play sounds
that you have and buffers

535
00:34:01,062 --> 00:34:05,111
and with opening L you can play sounds
directly from a file

536
00:34:05,669 --> 00:34:10,490
a play compressed data with our
knowledgeable AV audio engine

537
00:34:10,049 --> 00:34:14,130
if we have to go back and cover cases
1&2 we can easily do so

538
00:34:15,003 --> 00:34:19,021
for short sounds we can just load them
into a view audiobook hot checks

539
00:34:19,048 --> 00:34:22,407
and schedule them on a player for music

540
00:34:22,839 --> 00:34:25,843
you can just our create maybe audio file
object

541
00:34:25,879 --> 00:34:30,470
and schedule that directly on a player
so how do you play sounds that need to

542
00:34:30,047 --> 00:34:31,052
be specialized

543
00:34:31,052 --> 00:34:34,098
will look at that now I like to
introduce

544
00:34:34,098 --> 00:34:37,937
a new note call the environment node and
this is essentially

545
00:34:38,819 --> 00:34:43,480
3d mixer so when you create an instance
of the environment note

546
00:34:43,048 --> 00:34:46,051
com you have a 3d space

547
00:34:46,051 --> 00:34:49,106
and you get an Elis know that implicit
to that treaty space

548
00:34:50,006 --> 00:34:53,295
all the source notes that connect

549
00:34:53,349 --> 00:34:56,520
to the environment node act as sources

550
00:34:56,052 --> 00:35:01,052
in this 3d space so the environment has
some attributes

551
00:35:01,052 --> 00:35:04,129
that you can set directly on the
environment node and then each of the

552
00:35:05,029 --> 00:35:06,125
sources have some attributes

553
00:35:07,025 --> 00:35:12,884
and you can set that using the AV audio
mixing protocols 3d properties

554
00:35:13,109 --> 00:35:16,420
nine-term some data formats I just want
to point out

555
00:35:16,042 --> 00:35:19,120
but when you're working with the
environment node all the sources

556
00:35:20,002 --> 00:35:23,005
need to have Amano data format in order
for that

557
00:35:23,005 --> 00:35:27,076
audio to be specialized if the sources
have a stereo data format

558
00:35:28,021 --> 00:35:32,052
and that data as poss through and
currently the environment no doesn't

559
00:35:32,052 --> 00:35:32,118
support

560
00:35:33,018 --> 00:35:38,033
a data format greater than two channels
on input

561
00:35:38,033 --> 00:35:41,072
so as a diagram as one looks like I've
created

562
00:35:41,369 --> 00:35:45,900
an instance of an environment node which
means I now have a TD space

563
00:35:45,009 --> 00:35:49,077
and I have an implicit listener I now
create to plan notes

564
00:35:50,058 --> 00:35:54,047
we're gonna act as sources in my 3d
space

565
00:35:54,569 --> 00:35:58,520
and using the AV audio mixing protocol I
can set it all up the source

566
00:35:58,052 --> 00:36:02,871
attributes so what makes things sound
greedy

567
00:36:03,339 --> 00:36:06,770
of virtual 3d well we have a number of
attributes

568
00:36:06,077 --> 00:36:09,150
and some belong to the sources others
belong to the environment

569
00:36:10,005 --> 00:36:13,038
let's walk through each to the source
attributes first

570
00:36:13,083 --> 00:36:17,112
so every source has a position in this
3d space

571
00:36:17,859 --> 00:36:22,040
and right now it specified using the
right-handed cartesian coordinate system

572
00:36:22,004 --> 00:36:25,005
a positive access to the right positive
why is up

573
00:36:25,014 --> 00:36:28,069
and positive the stewards the listener

574
00:36:28,069 --> 00:36:31,072
now with respect to the listener the
listener uses

575
00:36:31,099 --> 00:36:35,168
some spatial cues to localize the
position up the source

576
00:36:36,068 --> 00:36:39,095
there's an intraoral time difference
just a slight

577
00:36:39,095 --> 00:36:42,151
a slight time difference for the sound
made by the source

578
00:36:43,051 --> 00:36:46,140
to get to each one of the listeners
years has also

579
00:36:46,599 --> 00:36:49,621
and in Doral level difference in
addition

580
00:36:49,819 --> 00:36:53,020
your head has the effect doing some
filtering

581
00:36:53,002 --> 00:36:58,016
and you also have some filtering here
with the years the pin on the years

582
00:36:58,016 --> 00:37:01,039
so we have several rendering algorithms

583
00:37:01,039 --> 00:37:05,043
and each one of them are the spatial
cues differently

584
00:37:05,043 --> 00:37:08,096
the thing is that we fix post this as a
source property

585
00:37:08,096 --> 00:37:11,117
so you can pick rendering algorithm poor
source

586
00:37:12,017 --> 00:37:16,456
and some other items may sound better
depending on the type of content

587
00:37:16,609 --> 00:37:22,160
your source is playing and also they
differ in terms of CPU cost

588
00:37:22,016 --> 00:37:25,955
summit you may wanna pick a more
expensive algorithm

589
00:37:26,099 --> 00:37:29,300
for an important source and a cheap
bother them

590
00:37:29,003 --> 00:37:32,081
for a regular source

591
00:37:33,008 --> 00:37:36,094
the next two properties obstruct
obstruction and occlusion

592
00:37:36,094 --> 00:37:40,172
deal with the filtering of sound into
obstacles between the source and listen

593
00:37:41,072 --> 00:37:42,079
up

594
00:37:43,042 --> 00:37:47,101
so in this case I have the source that's
the monster

595
00:37:48,001 --> 00:37:51,076
and the listener that the handsome
prince and as a column

596
00:37:51,076 --> 00:37:54,115
between the source and the listener for
the direct pop

597
00:37:54,799 --> 00:37:58,760
of sound is muffled West that reflected
pots

598
00:37:58,076 --> 00:38:03,415
across the walls are clear and this is
modeled by obstruction

599
00:38:04,099 --> 00:38:07,150
on the other hand if the source

600
00:38:07,015 --> 00:38:11,022
and the listener I and different spaces
to right now there's a wall

601
00:38:11,022 --> 00:38:14,871
between the source and the listener both
the direct pappas on

602
00:38:15,069 --> 00:38:19,074
and reflected parts of Sun I muffled

603
00:38:19,569 --> 00:38:24,642
let's not move on to the listener a the
environment attributes

604
00:38:25,299 --> 00:38:29,190
so every environment has an implicit
listener and the listener has

605
00:38:29,019 --> 00:38:33,678
a position an orientation the position
is specified using the same coordinate

606
00:38:33,849 --> 00:38:33,947
system

607
00:38:34,829 --> 00:38:39,010
and for the orientation you can specify
using either to actors

608
00:38:39,001 --> 00:38:42,590
up front and then up Victor or three
angles

609
00:38:42,599 --> 00:38:46,630
your pitch and roll

610
00:38:46,063 --> 00:38:49,232
you also have distance attenuation in
the environment

611
00:38:49,799 --> 00:38:53,180
which is just the attenuation of sound
as a source

612
00:38:53,018 --> 00:38:58,637
moves away from the listen up so in this
car after two points of interest

613
00:38:58,799 --> 00:39:02,130
there's the reference distance which is
the distance about

614
00:39:02,013 --> 00:39:06,047
which we start applying some amount of
attenuation

615
00:39:06,047 --> 00:39:09,121
there's also the maximum distance which
is the point about which

616
00:39:10,021 --> 00:39:13,093
the amount of attenuation being applied
is capped

617
00:39:13,093 --> 00:39:16,118
so all the exciting stuff happens
between the reference distance

618
00:39:17,018 --> 00:39:20,033
and the maximum distance and in that
region

619
00:39:20,033 --> 00:39:23,072
we have three coats that you can pick
from

620
00:39:23,072 --> 00:39:26,124
so the form of code this is what it
looks like all you need to do is get the

621
00:39:27,024 --> 00:39:29,603
distance attenuation prime news object

622
00:39:29,819 --> 00:39:36,819
from the environment and then you can go
ahead and tweak all the settings

623
00:39:37,022 --> 00:39:41,058
now every environment also has
reverberation which is just a simulation

624
00:39:41,058 --> 00:39:44,337
up the sound reflections within that
space

625
00:39:44,859 --> 00:39:48,880
the environment note has a bit and
reverb and

626
00:39:49,069 --> 00:39:53,180
you can pick from a selection of factory
presets

627
00:39:53,018 --> 00:39:57,029
now once you picked the type of reverbed
you want to use

628
00:39:57,029 --> 00:40:00,103
you can set a blend amount for each
source

629
00:40:01,003 --> 00:40:05,052
and that just affects the amount of each
source that you're here in the refurb

630
00:40:05,052 --> 00:40:05,149
mix

631
00:40:06,049 --> 00:40:09,068
so for some sources you may want them to
sound completely dry

632
00:40:09,068 --> 00:40:12,164
see set the blend margin:0 and other
sources you may want to sound more

633
00:40:13,064 --> 00:40:13,141
ambient

634
00:40:14,041 --> 00:40:19,000
so you can turn up the blend among we
also have a single filter

635
00:40:19,369 --> 00:40:23,040
that applies to the output at the reverb
so let's say that you pick

636
00:40:23,004 --> 00:40:26,013
one of the factory presets and you want
it to sound

637
00:40:26,013 --> 00:40:30,071
maybe a little brighter you can do that
using the filter

638
00:40:30,071 --> 00:40:33,163
in court this is what it looks like I
get the evil parameters object

639
00:40:34,063 --> 00:40:37,131
from the environment in this case I'm
enabling it

640
00:40:38,031 --> 00:40:41,124
and I'll order a factory preset the
large hole preset

641
00:40:42,024 --> 00:40:47,024
and using the AV audio mixing protocol I
set the sources reveal blend

642
00:40:47,024 --> 00:40:51,049
2.2 so now we've talked about two types
have mixers

643
00:40:51,049 --> 00:40:55,056
you have the 2d mixer and you have the
treaty mixer

644
00:40:55,056 --> 00:40:58,545
and source nodes but as the player the
input node

645
00:40:59,049 --> 00:41:04,052
talk to these mixers using the AV audio
mixing protocol

646
00:41:04,349 --> 00:41:09,000
so I just wanted to point out when a
source node is connected to a 2d mixer

647
00:41:09,000 --> 00:41:12,021
than all of the common and the to be
mixing properties

648
00:41:12,021 --> 00:41:16,117
take affect when a source node is
connected to a treaty mixer

649
00:41:17,017 --> 00:41:22,091
then all of the common and a 3d mixing
properties take affect

650
00:41:22,091 --> 00:41:25,115
let's look at what that looks like here

651
00:41:26,015 --> 00:41:29,434
so let's say that I have clear one who's
connected

652
00:41:29,569 --> 00:41:32,615
to the 2d mixer I set

653
00:41:33,029 --> 00:41:37,000
up and to be -1 and volume 2.5

654
00:41:37,000 --> 00:41:40,041
note that band is a 2d mixing property

655
00:41:40,041 --> 00:41:44,077
but volume is a common mixing property
in this case both have them will take

656
00:41:44,077 --> 00:41:45,101
affect

657
00:41:46,001 --> 00:41:49,052
because the mixer known implements both
of these properties

658
00:41:49,052 --> 00:41:54,117
if I disconnect play 01 from the mixer
and connected to the environment node

659
00:41:55,017 --> 00:41:59,033
the pan property will now be cached it
doesn't take affect

660
00:41:59,033 --> 00:42:03,104
because it's a 2d mixing property it
doesn't apply to the environment no

661
00:42:04,004 --> 00:42:07,043
volume on the other hand will continue
to take affect

662
00:42:07,043 --> 00:42:10,682
because it's a common mixing property
and it's implemented by the environment

663
00:42:11,069 --> 00:42:11,700
out

664
00:42:11,007 --> 00:42:16,106
so with all that information let's look
at a sample gaming setup

665
00:42:16,799 --> 00:42:20,060
now this is just one of many ways that
you can do this

666
00:42:20,006 --> 00:42:24,815
and this is just a suggestion it really
all depends on your application

667
00:42:24,869 --> 00:42:28,640
but in this case I have to 3d sources

668
00:42:28,064 --> 00:42:32,243
some going to use a player to play some
sounds they'll be specialized

669
00:42:32,819 --> 00:42:36,880
and also live input so let's say that
the users chatting

670
00:42:36,088 --> 00:42:39,090
and then you wanna specialized that in a
3d environment

671
00:42:40,008 --> 00:42:43,787
I can connect the pair node and the
input node to the environment out

672
00:42:43,859 --> 00:42:47,770
and that's connected out for the engines
main mixer

673
00:42:47,077 --> 00:42:50,140
I can now have a second player I'm going
to dedicate

674
00:42:51,004 --> 00:42:54,713
to playing music so this players going
to play music

675
00:42:55,109 --> 00:42:58,260
and I'm gonna run it through an EQ and
connect that

676
00:42:58,026 --> 00:43:01,385
to the main mixer let's say that I
present some UI

677
00:43:01,619 --> 00:43:04,810
for the user so that he can tweak the EQ
settings

678
00:43:04,081 --> 00:43:07,170
maybe to make music sound better

679
00:43:08,007 --> 00:43:11,026
I have a third player now that I'm going
to dedicate

680
00:43:11,089 --> 00:43:14,170
on the to you I sound effects so maybe
the sounds that are made

681
00:43:15,007 --> 00:43:20,029
I think navigate through menus or if my
game avatars picked up a bonus item

682
00:43:20,092 --> 00:43:23,183
except up so the the UI player is
connected

683
00:43:24,083 --> 00:43:27,302
directly the engines main mixer

684
00:43:28,049 --> 00:43:33,103
this is what the overall picture looks
like

685
00:43:33,589 --> 00:43:36,930
so given all this information let's now
look at a demo

686
00:43:36,093 --> 00:43:43,093
at the environment held

687
00:43:50,044 --> 00:43:53,125
someone explain what's happening over
here in this demo

688
00:43:54,025 --> 00:43:58,083
I am using scene kid for the graphics
and sink it also comes with the physics

689
00:43:58,083 --> 00:43:58,127
engine

690
00:43:59,027 --> 00:44:02,031
so this works nicely with AVI Kenjon

691
00:44:02,067 --> 00:44:05,466
so I basically have two types us on Sat
I'm playing

692
00:44:06,069 --> 00:44:09,170
that though son that place and that's
before

693
00:44:09,017 --> 00:44:12,071
any ball is launched so to do that

694
00:44:12,071 --> 00:44:15,090
I use a player node and I have

695
00:44:15,009 --> 00:44:19,408
a the lawn sound effect in a buffer and
I schedule that buffer on the player

696
00:44:20,299 --> 00:44:21,080
known

697
00:44:21,008 --> 00:44:25,707
but I make use of the completion handler
to know when the player has consumed the

698
00:44:25,779 --> 00:44:26,779
bottle

699
00:44:26,779 --> 00:44:29,813
so when the player lets me know that
it's done with the buffer

700
00:44:30,119 --> 00:44:33,270
I go ahead and now create a scene kid
node

701
00:44:33,027 --> 00:44:37,124
that's a ball and i also create and AB
audio player note

702
00:44:38,024 --> 00:44:42,029
attach it to the engine and connect that

703
00:44:42,029 --> 00:44:45,056
to the environment note so I'm coming up
clear

704
00:44:45,056 --> 00:44:48,141
a dedicated player to each ball

705
00:44:49,041 --> 00:44:52,106
now the ball is launched into the world
and as it goes about

706
00:44:53,006 --> 00:44:57,049
and collides with other surfaces for
every collision that happens

707
00:44:57,049 --> 00:45:01,066
scene kids physics engine lets me know
that a collision as happened with some

708
00:45:01,066 --> 00:45:02,067
other surface

709
00:45:02,067 --> 00:45:05,102
and I get the point of collision and
also the

710
00:45:06,002 --> 00:45:09,023
a imparts so

711
00:45:09,023 --> 00:45:13,029
using back I can go all and dig up the
player note

712
00:45:13,083 --> 00:45:16,302
that's tied to the scene kid note

713
00:45:17,049 --> 00:45:21,970
I can't set the position on the player
based on where the collision happened

714
00:45:21,097 --> 00:45:26,156
calculate a volume for my collision
sound based on the impulse

715
00:45:27,029 --> 00:45:30,640
and then just play this out

716
00:45:30,064 --> 00:45:33,203
but you can see now how in this setup I

717
00:45:33,779 --> 00:45:36,812
for every ball that's born into this
world

718
00:45:37,109 --> 00:45:41,700
a nuclear north is also created so the
number of players is growing and I'm

719
00:45:41,007 --> 00:45:41,926
dynamically

720
00:45:42,619 --> 00:45:45,692
attaching it to the engine and
connecting it to the environment known

721
00:45:46,349 --> 00:45:53,000
so the setup is very flexible

722
00:45:53,000 --> 00:45:56,091
I let's go back slides that brings us to
the end of our talk

723
00:45:56,091 --> 00:45:59,149
so let's quickly summarize all the
things we've seen today

724
00:46:00,049 --> 00:46:04,091
we started off talking about an engine
and how you can create different nodes

725
00:46:04,091 --> 00:46:07,156
attach them to the engine and then use
the engine to make connections

726
00:46:08,056 --> 00:46:13,064
between each of these notes we then look
at the different types of notes

727
00:46:13,064 --> 00:46:17,067
on a destination node which is the
output node

728
00:46:17,067 --> 00:46:20,118
and we talked about to source nodes the
player known

729
00:46:21,018 --> 00:46:24,407
and input no the player is the

730
00:46:24,569 --> 00:46:28,623
know do you use to push on your data on
that end the threat

731
00:46:29,109 --> 00:46:32,680
we looked at two types of mixer notes
the 2d mixer

732
00:46:32,068 --> 00:46:35,073
and a 3d mixer and

733
00:46:35,073 --> 00:46:41,074
house source nodes talk to these mixers
using the AV audio mixing protocol

734
00:46:41,083 --> 00:46:45,147
we then looked at effect notes and two
types a perfect notes the AVR you need

735
00:46:46,047 --> 00:46:47,696
to fax in abit unit time

736
00:46:48,119 --> 00:46:51,730
pics finally we

737
00:46:51,073 --> 00:46:56,392
talked about no taps and that's how you
pull data from the end the threat

738
00:46:57,049 --> 00:47:01,680
Sun I just want to point out that no
tops also useful debugging tool

739
00:47:01,068 --> 00:47:04,071
let's say that you have a number of
connections in your application

740
00:47:04,098 --> 00:47:07,237
and things don't sound the way you
expect them to sign

741
00:47:08,119 --> 00:47:12,164
what you can do is install no taps at
different points in your chain

742
00:47:12,569 --> 00:47:16,490
on different nodes and just examine the
output I V chip these notes

743
00:47:16,049 --> 00:47:20,090
and using that you can drill down where
the problem is so in that sense no taps

744
00:47:20,009 --> 00:47:23,228
a useful debugging tool

745
00:47:24,119 --> 00:47:27,193
so that brings us the end of our session
I just wanna say that

746
00:47:27,859 --> 00:47:31,470
this is the first version of AB
Audioengine and be a very excited about

747
00:47:31,047 --> 00:47:32,054
it

748
00:47:32,054 --> 00:47:35,056
so we'd love to hear what you think
please try it out

749
00:47:35,056 --> 00:47:39,147
and give us your feedback if you have
any further questions at a later point

750
00:47:40,047 --> 00:47:43,070
you can contact Philip whose I graphics
and game

751
00:47:43,007 --> 00:47:44,029
technologies evangelist

