1
00:00:14,042 --> 00:00:15,045
hello harm

2
00:00:15,072 --> 00:00:18,073
welcome to section 225 what's new in
court in a

3
00:00:18,082 --> 00:00:21,157
I am with Turner I want the engineers
who worked on core data and I'm gonna be

4
00:00:22,057 --> 00:00:22,152
here talking to you

5
00:00:23,052 --> 00:00:26,056
about sort of all the new stuff that we
have been doing stuff

6
00:00:26,092 --> 00:00:30,791
you're likely be interested in cell when
we do talk about today

7
00:00:31,619 --> 00:00:34,750
well first on the list first on the
agenda is

8
00:00:34,075 --> 00:00:37,564
new API batch updates and a second
session

9
00:00:38,239 --> 00:00:42,296
I'm going to talk about the implications
love those two APIs for those of you who

10
00:00:42,809 --> 00:00:43,905
have implemented your own incremental
stores

11
00:00:44,769 --> 00:00:47,807
but talk about their critic unhurt
two-story

12
00:00:48,149 --> 00:00:51,197
thats the theme that seems to come up
every year in our presentations

13
00:00:51,629 --> 00:00:54,780
given I cloud update state affairs

14
00:00:54,078 --> 00:00:57,817
and I'm gonna talk about lectures on all
of your minds

15
00:00:58,519 --> 00:01:03,600
swift that updates

16
00:01:03,006 --> 00:01:07,008
what are they why do you care well

17
00:01:07,062 --> 00:01:10,071
their way to mass

18
00:01:11,052 --> 00:01:14,097
update data in the database bypass a
managed object context

19
00:01:14,097 --> 00:01:17,154
and editing the store directly

20
00:01:18,054 --> 00:01:21,062
on primarily centrally intended for at

21
00:01:22,034 --> 00:01:26,273
after updating attribute values and it's
really a performance optimization

22
00:01:26,579 --> 00:01:28,200
because if you think about how Chordata

23
00:01:28,002 --> 00:01:31,011
works up until now if you wanted to edit

24
00:01:32,001 --> 00:01:35,620
say 10,000 20,000 lines in a field

25
00:01:35,719 --> 00:01:39,950
gone on vacation and left her phone
behind then come back to discover that

26
00:01:39,095 --> 00:01:40,181
your coworkers have been really really
busy

27
00:01:41,081 --> 00:01:44,170
you have a lot if SCM messages

28
00:01:44,899 --> 00:01:49,180
she wanted mark all those read in one
fell swoop you would have to

29
00:01:49,018 --> 00:01:52,807
load all the objects into managed object
context

30
00:01:52,969 --> 00:01:57,640
edit them and save them and there's a
problem here

31
00:01:57,064 --> 00:02:01,723
which well kinda look like this which is
that on a memory constrained device

32
00:02:02,299 --> 00:02:05,331
loading every single object into memory

33
00:02:05,619 --> 00:02:09,720
doesn't necessarily work that well
jetsam may take a fact

34
00:02:09,072 --> 00:02:13,108
servers into was simply that you would

35
00:02:14,008 --> 00:02:17,074
do this in batches you closer lot if you
object

36
00:02:17,074 --> 00:02:22,112
edit them save them load a few more
objects

37
00:02:23,012 --> 00:02:26,014
edit them save them

38
00:02:26,014 --> 00:02:29,042
the server problem with this approach as
well

39
00:02:29,042 --> 00:02:33,079
and it kinda looks like this it takes
time

40
00:02:33,079 --> 00:02:37,115
and usually likely to encounter a
progress indicator as they wait for

41
00:02:38,015 --> 00:02:39,046
whatever set of changes

42
00:02:39,046 --> 00:02:43,069
it was that you were making so it done
now

43
00:02:43,069 --> 00:02:46,147
years we've added a new method tennis
managed object context to text your

44
00:02:47,047 --> 00:02:48,048
quest air

45
00:02:48,048 --> 00:02:52,079
it takes an honest person so request
some you're probably familiar with that

46
00:02:52,079 --> 00:02:52,156
class name

47
00:02:53,056 --> 00:02:56,060
it's the base class for and as per NS

48
00:02:56,096 --> 00:02:59,098
such a question and a save changes
request on

49
00:02:59,098 --> 00:03:02,151
now new parent class for and is backed
up their quest as well

50
00:03:03,051 --> 00:03:08,060
talk about that slide X your request
returns a persistent store results

51
00:03:08,006 --> 00:03:11,021
that's a new class it's sort of an
abstract superclass intended to be a

52
00:03:11,075 --> 00:03:11,130
parent

53
00:03:12,003 --> 00:03:16,075
anything that's rich returned from this
map it I've added an S patch update

54
00:03:17,002 --> 00:03:17,099
result as

55
00:03:17,099 --> 00:03:20,141
its first child subclass to return the
results

56
00:03:21,041 --> 00:03:26,045
have about job their quest that such a
request itself should look pretty

57
00:03:26,045 --> 00:03:26,052
familiar

58
00:03:27,015 --> 00:03:30,102
to those of you who are familiar with
such requests it allows you to specify

59
00:03:31,002 --> 00:03:32,020
an entity

60
00:03:32,002 --> 00:03:36,044
that's the entity whose instances you
want changed well as you to specify the

61
00:03:36,062 --> 00:03:36,101
effect

62
00:03:37,001 --> 00:03:40,036
stores one or more stores containing
daddy wanna change

63
00:03:40,036 --> 00:03:44,100
well as you give predicate specifying
which specific instances you're

64
00:03:45,000 --> 00:03:46,004
interested in changing

65
00:03:46,004 --> 00:03:49,086
the same kinda predicate you said on a
special quest has all the same power and

66
00:03:49,086 --> 00:03:49,172
flexibility

67
00:03:50,072 --> 00:03:55,086
you can use upgrades if you want to well
as you specified properties update

68
00:03:55,086 --> 00:03:59,117
on this is a dictionary specifies the
property as

69
00:04:00,017 --> 00:04:03,049
a key there either the property name or
the house property description

70
00:04:03,049 --> 00:04:07,056
and in essence expression describing the
update as a value

71
00:04:07,056 --> 00:04:10,141
Picasa value expression a function
expression operating I keep out

72
00:04:11,041 --> 00:04:14,041
in the the object graph

73
00:04:14,041 --> 00:04:18,110
pretty much anything that sported as
part of properties to fetch

74
00:04:18,479 --> 00:04:21,517
is supported here pretty much anything
that's either a valid left hand side or

75
00:04:21,859 --> 00:04:23,300
right hand side effects predicate

76
00:04:23,003 --> 00:04:27,070
is the move out here else also allows
you to specify a result type

77
00:04:27,097 --> 00:04:30,100
and the result I possess kind of
interesting because you always get and

78
00:04:31,027 --> 00:04:32,096
NS batch update result

79
00:04:32,096 --> 00:04:36,102
from X your class that will indicate
whether

80
00:04:37,002 --> 00:04:40,086
you know your operation succeeded or
failed

81
00:04:40,086 --> 00:04:43,108
the existence love the instance itself

82
00:04:44,008 --> 00:04:48,117
but it may also have affection result

83
00:04:48,189 --> 00:04:53,270
parameter lot property set on it this
resort property can be a couple things

84
00:04:53,027 --> 00:04:56,016
if you're just interested in finding out
whether or not anything changed in the

85
00:04:56,259 --> 00:04:57,250
database

86
00:04:57,025 --> 00:05:00,944
there's you can set a Twitter account
which will just give you the number I've

87
00:05:01,169 --> 00:05:05,960
rose they're actually changed as
resulted that batch update operation

88
00:05:05,096 --> 00:05:09,115
or if you want you can get allister the
object ID's

89
00:05:10,015 --> 00:05:13,028
up the Rose that were changed operation
and thats

90
00:05:13,028 --> 00:05:16,055
interesting for one particular reason
which is that because this is about

91
00:05:16,055 --> 00:05:17,080
update operation

92
00:05:17,008 --> 00:05:20,277
and because we're operating sys directly
on the store itself

93
00:05:21,069 --> 00:05:24,150
bypassing the managed object context
none of the changes that are made in the

94
00:05:24,879 --> 00:05:24,932
store

95
00:05:25,409 --> 00:05:29,310
as a result of that operation will be
reflected in the managed object context

96
00:05:29,031 --> 00:05:32,860
and to you call refresh object on those
objects

97
00:05:33,139 --> 00:05:37,164
so if you're interested in updating your
database on mass

98
00:05:37,389 --> 00:05:40,930
setting a feel setting off a flag on a
particular calling for example

99
00:05:40,093 --> 00:05:43,482
and they're reflecting the changes in
the UI you're gonna need yet

100
00:05:44,319 --> 00:05:48,300
the results or that match object ID's
backs you can tell the object

101
00:05:48,003 --> 00:05:53,031
tell the manager that context to refresh
the object that's it.

102
00:05:53,058 --> 00:05:57,367
another implication a the way to set up
is that

103
00:05:57,889 --> 00:06:00,710
well context doesn't know anything about
the changes you're making so the

104
00:06:00,071 --> 00:06:01,077
validation rules

105
00:06:01,077 --> 00:06:06,626
are not run I'm this means it is now
possible for you to add bad edit your

106
00:06:07,319 --> 00:06:08,240
database

107
00:06:08,024 --> 00:06:11,223
please don't do that your customers will
not appreciate it

108
00:06:11,439 --> 00:06:14,455
on but

109
00:06:14,599 --> 00:06:17,665
if you do this accidentally feeling
about field what it means is

110
00:06:18,259 --> 00:06:21,262
customers the next time they load that
object

111
00:06:21,289 --> 00:06:24,363
edit the object and try and save are
going to get a validation failure

112
00:06:25,029 --> 00:06:28,710
maybe may be fairly confused as to what
happened since they may not have changed

113
00:06:28,071 --> 00:06:30,890
that actual field

114
00:06:31,529 --> 00:06:34,620
we do update the optimistic walking
version in the database

115
00:06:34,062 --> 00:06:37,471
for all the rows that are change on this
means now

116
00:06:38,029 --> 00:06:41,126
30 even if you're in a single persistent
store coordinator

117
00:06:41,999 --> 00:06:45,210
your circle managed object context
single prison store coordinator

118
00:06:45,021 --> 00:06:48,040
single instance savannas persistent
store all the changes

119
00:06:48,229 --> 00:06:52,272
you make go through that setup you can
now create a merge conflict with

120
00:06:52,659 --> 00:06:55,360
yourself as you go down at the database

121
00:06:55,036 --> 00:06:58,435
and context doesn't know anything about
those changes you're gonna need to

122
00:06:58,759 --> 00:07:00,520
remember set to merge policy

123
00:07:00,052 --> 00:07:03,251
on you managed object context if you're
using us

124
00:07:03,719 --> 00:07:07,830
API because well otherwise you may
confuse the heck other users as they get

125
00:07:07,083 --> 00:07:09,792
say failures

126
00:07:10,539 --> 00:07:17,360
and now I'm gonna do a demo show you
that this actually does really work

127
00:07:17,036 --> 00:07:20,084
okay so what here what I have here is a

128
00:07:20,084 --> 00:07:24,133
simulacrum love a male system since this
is the

129
00:07:25,033 --> 00:07:28,109
the case were I most frequently see this
kind about something happening

130
00:07:29,009 --> 00:07:32,198
girl application that displays you know
messages coming in

131
00:07:32,279 --> 00:07:35,321
my manager asking me if I've got my
graphics ready for the presentation

132
00:07:35,699 --> 00:07:39,120
managers are so demanding and me saying
I L

133
00:07:39,012 --> 00:07:42,049
has a few days old thank them through
and as I edit the

134
00:07:42,049 --> 00:07:45,908
as I slept these messages you can see
that the red indicator

135
00:07:46,349 --> 00:07:50,360
is be marked as well or the undead and
caters being

136
00:07:50,036 --> 00:07:54,675
damaged come down here look at this
other mailbox

137
00:07:54,999 --> 00:07:58,091
which contains a whole bunch random cm
messages

138
00:07:58,919 --> 00:08:04,360
that well nobody cares about and that
reset my database but I'll

139
00:08:04,036 --> 00:08:09,130
on I can come up here and Matt batch
mark these as red

140
00:08:10,003 --> 00:08:15,612
I'm gonna wait wat wait wait wait wait

141
00:08:15,909 --> 00:08:20,020
because well this mail box contains

142
00:08:20,002 --> 00:08:24,071
200,000 messages and credit is gonna
have to load every single one of those

143
00:08:24,089 --> 00:08:27,580
at them and say again and that takes a
little while

144
00:08:27,058 --> 00:08:33,707
matter fact if I come down here and work
at

145
00:08:34,229 --> 00:08:37,273
I project find out it to

146
00:08:37,669 --> 00:08:40,761
several seconds let me come down

147
00:08:41,589 --> 00:08:45,050
this mail box contains the exact same
for messages the previous night watch

148
00:08:45,005 --> 00:08:46,059
dat

149
00:08:46,059 --> 00:08:50,120
come down here mark it as read new style

150
00:08:51,002 --> 00:08:58,002
that took less than a second

151
00:08:58,045 --> 00:09:01,062
so yeah we think you developers are
going to become happy with this and just

152
00:09:01,062 --> 00:09:01,127
as

153
00:09:02,027 --> 00:09:07,051
are your customers and be happy with us
and just as sort of a frame of reference

154
00:09:07,051 --> 00:09:10,096
this is the effective command that I'm
running in

155
00:09:10,096 --> 00:09:15,144
as to a light to make that up to happen

156
00:09:16,044 --> 00:09:19,115
and you can see that we're pretty close
to just the right SQL

157
00:09:20,015 --> 00:09:23,100
update times so as I said

158
00:09:24,000 --> 00:09:27,081
changes are not reflected in the
database when you I updated in that

159
00:09:27,081 --> 00:09:28,150
application that was being done by

160
00:09:29,005 --> 00:09:32,018
KVL tracking that I'd updated 3 property

161
00:09:32,063 --> 00:09:35,084
are fresh the objects that were big
displayed in the table looks the table

162
00:09:35,084 --> 00:09:37,092
he was set up to be lazy fetching

163
00:09:37,092 --> 00:09:40,094
all your senate Chordata make this up
perform

164
00:09:41,012 --> 00:09:45,089
nice responsibly tracks validation rules
as I said are not run

165
00:09:45,089 --> 00:09:49,093
kinda running with scissors please don't
hurt yourself for anybody else

166
00:09:50,029 --> 00:09:53,054
we update the just walking version the
database i'm just repeating all of this

167
00:09:53,054 --> 00:09:53,106
to

168
00:09:54,006 --> 00:09:59,024
to reinforce it bring it home create
merge conflicts on yourself so

169
00:09:59,024 --> 00:10:02,046
outset emerge policy

170
00:10:02,046 --> 00:10:08,108
letter for Snow White API our second the
API is a second such

171
00:10:09,008 --> 00:10:12,103
what is that why do you care well this
is actually feature that a lot of

172
00:10:13,003 --> 00:10:15,081
developers have been asking for for
quite some time

173
00:10:15,081 --> 00:10:20,107
it allows you to XQ to fetch in another
context will populate that managed

174
00:10:21,007 --> 00:10:21,093
object context

175
00:10:21,093 --> 00:10:27,127
with actually blocking access to that
context for the duration of the facts

176
00:10:28,027 --> 00:10:32,099
its counsel which means if you're user
loses interest in whatever triggers that

177
00:10:32,099 --> 00:10:32,161
fetch

178
00:10:33,061 --> 00:10:36,109
you can tell us to stop doing it and
price progress reporting

179
00:10:37,009 --> 00:10:40,067
along the way

180
00:10:40,067 --> 00:10:43,114
little brief refresher housing
construction works you got a managed

181
00:10:44,014 --> 00:10:47,056
object context

182
00:10:47,056 --> 00:10:53,078
effect request XQ fetch quest on managed
object context

183
00:10:53,078 --> 00:10:57,107
sends a request down to the store which
takes some time

184
00:10:58,007 --> 00:11:03,025
thinks about it

185
00:11:03,025 --> 00:11:07,038
returns a response K shaper Vanessa Rae

186
00:11:07,038 --> 00:11:12,056
updates non-drug context and returns the
result to you

187
00:11:12,056 --> 00:11:16,131
well a sickness fetching is a little bit
different

188
00:11:17,031 --> 00:11:21,031
on returns future which is returned
immediately from

189
00:11:21,031 --> 00:11:24,119
XQ request there's no waiting

190
00:11:25,019 --> 00:11:28,024
their quest specifies a call that block
will be in

191
00:11:28,024 --> 00:11:31,065
X will be invoked whenever the fetch

192
00:11:31,065 --> 00:11:35,117
finishes executing if the fetch
specifies

193
00:11:36,017 --> 00:11:40,065
this is an especially West got more
detail in a couple slides

194
00:11:40,065 --> 00:11:43,071
that the context should be updated as a
result the facts

195
00:11:44,025 --> 00:11:49,036
that will happen and this means that it
occurs fishing is only supported

196
00:11:49,036 --> 00:11:52,101
for managed object context that are
using either the private Cuban currency

197
00:11:53,001 --> 00:11:55,057
type or the and its main you can pretty
tight

198
00:11:55,057 --> 00:11:58,102
because this is the only way that we
have a separate

199
00:11:59,002 --> 00:12:03,013
cue that we know has soul access to

200
00:12:03,013 --> 00:12:07,019
the state and managed object context
it's not supported for the confinement

201
00:12:07,019 --> 00:12:11,082
hard to type to the sister how its
inspection

202
00:12:11,082 --> 00:12:14,117
marks again you have managed object
context only now

203
00:12:15,017 --> 00:12:18,064
you have an assistant in such a blast

204
00:12:18,064 --> 00:12:22,105
X your quest on context context
immediately

205
00:12:23,005 --> 00:12:27,012
creates returns in a synchronous
factions of same time

206
00:12:27,012 --> 00:12:32,012
it takes the it's been such a question
gave us and send it down to the store

207
00:12:32,012 --> 00:12:35,055
you can now continue editing manage
objects in the image

208
00:12:35,055 --> 00:12:39,142
ida context you can do fetches faults
yeah all kinda work you gonna want to do

209
00:12:40,042 --> 00:12:44,056
on you manage our tax at some point the
store all finished executing that

210
00:12:44,056 --> 00:12:45,105
request

211
00:12:46,005 --> 00:12:50,012
and said the results back update the
context as necessary

212
00:12:50,012 --> 00:12:53,017
and invoke the call back on the units
such that you

213
00:12:53,062 --> 00:12:56,070
that is on the it occurs factors request

214
00:12:56,007 --> 00:13:02,093
and tell you hey you have data maybe
should do something like that

215
00:13:03,056 --> 00:13:06,084
so it is a secret special quest is a new
subclass urbanised

216
00:13:06,084 --> 00:13:09,169
star-crossed on as I said it's
initialized with

217
00:13:10,069 --> 00:13:14,074
affect request an instance events that
request now to completion block should

218
00:13:14,074 --> 00:13:14,155
be invoked

219
00:13:15,055 --> 00:13:20,056
when fetches finished you pass a text
your quest error

220
00:13:20,056 --> 00:13:24,068
which will return immediately its the
initiative has fetched

221
00:13:24,068 --> 00:13:27,144
results or know if there something badly
badly wrong

222
00:13:28,044 --> 00:13:31,052
with effect request

223
00:13:31,052 --> 00:13:34,096
it necessary to such results also pretty
simple classes on

224
00:13:34,096 --> 00:13:37,188
again it's a subclasses interspersed
store result

225
00:13:38,088 --> 00:13:41,120
this will preside provide results
immediately on property

226
00:13:42,002 --> 00:13:45,075
on fetches I'll in or you there'll be an
error on it

227
00:13:45,093 --> 00:13:49,156
after completion if Summerset reason the
fetch failed

228
00:13:50,056 --> 00:13:53,080
turn return immediately for XQ request
error

229
00:13:53,008 --> 00:13:57,023
or you now no if there's an issue

230
00:13:57,095 --> 00:14:01,104
how do you set one up pretty simple here
we're just setting affect requested us

231
00:14:02,085 --> 00:14:06,094
fetch for all instances have my Anthony
I could if I wanted to add a predicate

232
00:14:06,094 --> 00:14:11,132
at sort descriptors all the usual
goodness is fully supported

233
00:14:12,032 --> 00:14:15,108
creating an assistant professor quest
with that fact request and completion

234
00:14:16,008 --> 00:14:16,102
block

235
00:14:17,002 --> 00:14:20,061
we should watch here just takes it but
it would normally take an SEC Chris

236
00:14:20,061 --> 00:14:20,152
fetters all

237
00:14:21,052 --> 00:14:24,136
just a little bit to want to put on a
slide on

238
00:14:25,036 --> 00:14:29,124
completion walk checks to see if the
result has a final result

239
00:14:30,024 --> 00:14:33,092
and if so it does whatever processing
you want done as a result of that such

240
00:14:33,092 --> 00:14:33,177
finishing

241
00:14:34,077 --> 00:14:37,142
otherwise you'll need to handle your
what you set up the aging process

242
00:14:38,042 --> 00:14:38,135
request

243
00:14:39,035 --> 00:14:42,078
just tell the context perform block XQ
request

244
00:14:42,078 --> 00:14:47,164
a circus fetch request and a way things
go

245
00:14:48,064 --> 00:14:51,115
said something about tracking progress
how does that work

246
00:14:52,015 --> 00:14:56,050
on pretty simple we use and its progress

247
00:14:56,005 --> 00:15:00,024
standard you so that's progress you
create your own before you call ext your

248
00:15:00,069 --> 00:15:01,124
quest

249
00:15:02,024 --> 00:15:05,033
core data will notice if you have done
this and

250
00:15:05,033 --> 00:15:09,071
will go off and create nested child as
progresses which will

251
00:15:09,071 --> 00:15:13,116
report their progress the parent and
this is also how we allow

252
00:15:14,016 --> 00:15:18,020
cancellations you wanna Council request
can Spanish progress

253
00:15:18,056 --> 00:15:21,067
has set up for this work well again it's
pretty simple

254
00:15:21,067 --> 00:15:25,102
tren esta to Venice progress set the
your Account 21

255
00:15:26,002 --> 00:15:29,008
why do we say your account to one has a
post the number of objects we expect to

256
00:15:29,062 --> 00:15:32,113
get back well because database
operations or streams and this Kevin

257
00:15:33,013 --> 00:15:33,101
definite

258
00:15:34,001 --> 00:15:37,007
how many objects you can get back may
get 100

259
00:15:37,007 --> 00:15:41,074
you may get 1% we can't tell up up front
so we can only ever say

260
00:15:41,074 --> 00:15:44,109
finished or not finished progress become
current

261
00:15:45,009 --> 00:15:49,062
pending an account one and this is the
same context perform block we saw on the

262
00:15:49,062 --> 00:15:50,159
last slide

263
00:15:51,059 --> 00:15:57,083
progress resign current and you're done

264
00:15:57,083 --> 00:16:00,141
at this point I'm going to bring my
manager Ben up and he's going to show

265
00:16:01,041 --> 00:16:03,125
you how all this works

266
00:16:04,025 --> 00:16:11,025
in real life

267
00:16:15,043 --> 00:16:15,124
good morning everyone

268
00:16:16,024 --> 00:16:19,047
manners been trouble and I me apparently
unreasonable manager

269
00:16:19,047 --> 00:16:23,112
the credited him so I

270
00:16:24,012 --> 00:16:27,051
to you give you a demonstration bad what
we've been working on

271
00:16:27,051 --> 00:16:30,075
and we had a sickness patching and
partner supporting I we're gonna show

272
00:16:30,075 --> 00:16:31,110
you a little simple app here

273
00:16:32,001 --> 00:16:35,096
and in order to give you something that
you guys can actually witness racks are

274
00:16:36,005 --> 00:16:38,094
gonna need a pretty long operations you
can observe the progress

275
00:16:38,094 --> 00:16:41,118
so in this case for can actually be
working a database as 10 million rows

276
00:16:42,018 --> 00:16:45,022
Amrani fetching about five million of
them into memory

277
00:16:45,022 --> 00:16:49,038
and a for the purposes in the demo

278
00:16:49,038 --> 00:16:52,086
the app is pretty refuted the total
number of objects in the database

279
00:16:52,086 --> 00:16:54,995
I don't actually recommend doing this
that can actually be kinda slow in and

280
00:16:55,769 --> 00:16:56,700
of itself

281
00:16:56,007 --> 00:17:00,049
but as much as I mentioned did his grace
are sort of streams

282
00:17:01,012 --> 00:17:03,101
you don't really know how many residents
back into your done and sometimes your

283
00:17:04,001 --> 00:17:06,054
audience must positively know exactly
what's going on

284
00:17:06,054 --> 00:17:10,333
so me gardepe reply to that so I'm to be
quick demonstration here

285
00:17:10,819 --> 00:17:13,906
and as you can see in status bar it's
counting on

286
00:17:14,689 --> 00:17:21,689
and Weaver

287
00:17:22,035 --> 00:17:26,044
populated the last few objects near a
appear in the table you I have not

288
00:17:27,025 --> 00:17:29,089
actually just put finally object to
Table View

289
00:17:29,089 --> 00:17:32,173
because that would be pretty cool I and

290
00:17:33,073 --> 00:17:36,642
as you can see sort of in the background
there from the that request actually

291
00:17:37,299 --> 00:17:38,360
goes by pretty quickly

292
00:17:38,036 --> 00:17:41,083
critical actually spend multiple cores
if the fact quite as long enough

293
00:17:41,083 --> 00:17:44,802
and I've been months in the cave you up
its BC there so than

294
00:17:45,549 --> 00:17:48,830
wanna get things we can do here's
cancellation it's pretty straightforward

295
00:17:48,083 --> 00:17:51,172
so do the same patch again and as we're
gonna long weekend

296
00:17:52,072 --> 00:17:56,151
decide to cancel it and wound up
happening is

297
00:17:56,799 --> 00:18:00,370
the Federal Board and predator will turn
and issues are cancelled air

298
00:18:00,037 --> 00:18:03,075
and see the status bar update their that
that we can so that

299
00:18:03,075 --> 00:18:06,077
and that's pretty much all there is to
it on

300
00:18:06,095 --> 00:18:11,102
we basically must work is going to be in
your cave your observer

301
00:18:12,002 --> 00:18:16,161
for doing something on the Ana's
progress so in this case and dispatching

302
00:18:16,179 --> 00:18:17,400
back to main thread to

303
00:18:17,004 --> 00:18:20,009
update status bar and doing some
throttling the updates

304
00:18:20,009 --> 00:18:24,042
so you get progress part it's probably
work faster than might otherwise want if

305
00:18:25,023 --> 00:18:25,057
you're

306
00:18:25,057 --> 00:18:32,057
touching 10 million rows and that's what
we have

307
00:18:39,000 --> 00:18:43,899
so onward incremental stars we know so
you have implemented them

308
00:18:43,899 --> 00:18:47,220
we've seen out there on web and that
means that some if you're going to have

309
00:18:47,022 --> 00:18:50,035
a few questions about how these new
API's

310
00:18:50,035 --> 00:18:53,037
affect you if the snippet if yes affect
you

311
00:18:53,037 --> 00:18:56,100
well the kind you know on

312
00:18:57,000 --> 00:19:00,034
if you want to just

313
00:19:00,034 --> 00:19:03,070
publish your store and haven't used by
random people your

314
00:19:03,007 --> 00:19:06,099
implementation XQ request on your
incremental star is going to now need to

315
00:19:07,062 --> 00:19:09,073
handle the new core data request types

316
00:19:09,073 --> 00:19:12,136
if you're curious and some you probably
are playing well

317
00:19:13,036 --> 00:19:16,305
does that mean I can now in front my own
so classes love

318
00:19:16,629 --> 00:19:21,620
as persistent store questions persist or
response from the answer is yes you can

319
00:19:21,062 --> 00:19:21,107
do that

320
00:19:22,007 --> 00:19:25,019
if you want talk a little bit but that
in

321
00:19:25,019 --> 00:19:30,088
a couple slides if you don't want to
support any new request types

322
00:19:30,259 --> 00:19:33,320
arm please fill gracefully by this I
mean

323
00:19:33,032 --> 00:19:37,001
do it seems reasonable probably you can
want to return an error

324
00:19:37,289 --> 00:19:41,340
and say I don't know how to do that this
is why the persistent store quest allows

325
00:19:41,799 --> 00:19:44,610
you to specify which stores you actually
want to target

326
00:19:44,061 --> 00:19:48,870
with any given resist are classed

327
00:19:49,419 --> 00:19:53,420
I'm doesn't make sense Center quest
store that doesn't know what to do it

328
00:19:53,429 --> 00:19:56,470
what to do with it whatever you do

329
00:19:56,047 --> 00:20:03,047
don't run exception that never ends well
your quest types com

330
00:20:03,072 --> 00:20:07,159
you should still be using with your new
request types and is managed object

331
00:20:08,059 --> 00:20:09,768
context XQ request air

332
00:20:10,299 --> 00:20:13,840
this will cause the access to your
purchase in store quarter

333
00:20:13,084 --> 00:20:16,119
she realized this is kind of important
if you want multiple things running

334
00:20:17,019 --> 00:20:17,083
around

335
00:20:17,083 --> 00:20:20,145
talking the same coordinator want to do
what we've done with

336
00:20:21,045 --> 00:20:24,404
fetching in batch updates create
request/response pair

337
00:20:24,809 --> 00:20:28,350
the context is going to return it
aggregated results

338
00:20:28,035 --> 00:20:31,744
which will contain a result of all the
individual stores that knew what to do

339
00:20:32,059 --> 00:20:36,092
with your process with your new subclass
and the default stores

340
00:20:36,389 --> 00:20:40,405
aren't actually going to recognize
customer quest types of you're using a

341
00:20:40,549 --> 00:20:44,648
quoted a stack that has multiple stores
some of which are defaults and some

342
00:20:45,539 --> 00:20:47,090
which is your custom store types

343
00:20:47,009 --> 00:20:52,020
you want to target their quest being
executed specifically at the stores that

344
00:20:52,002 --> 00:20:57,043
know what to do it why might you want to
add

345
00:20:57,061 --> 00:21:01,134
Europe's your own subclass and this
person stork last

346
00:21:02,034 --> 00:21:06,037
won the big things that we've heard
repeatedly is that well

347
00:21:06,037 --> 00:21:09,686
on minimize requests minimize trips the
store

348
00:21:10,019 --> 00:21:13,057
this is particularly relevant in cases
where

349
00:21:13,399 --> 00:21:17,412
on you've got to destroy object your
house and as part of your apt watch

350
00:21:17,529 --> 00:21:22,000
you want to bring in instances of what's
a different entities you don't want to

351
00:21:22,000 --> 00:21:22,779
have to call

352
00:21:22,779 --> 00:21:25,940
excuse setrequest for and different

353
00:21:25,094 --> 00:21:28,146
parts of your subgraphs that can get
expensive if you've got

354
00:21:29,046 --> 00:21:33,062
10 shucks your graph have met ten
separate network calls

355
00:21:33,062 --> 00:21:38,111
that take a takes time and be maybe a
lot of overhead involved in those calls

356
00:21:39,011 --> 00:21:42,099
going across cellular network that your
users don't wanna waste about let's

357
00:21:42,099 --> 00:21:45,176
so that's one thing you might want to
consider in for dinner special quest for

358
00:21:46,076 --> 00:21:46,475
is a

359
00:21:47,159 --> 00:21:52,164
a launch time setup you may want to do
something object object refresh

360
00:21:52,659 --> 00:21:56,500
hi database I got these 10 objects set
me back data

361
00:21:56,005 --> 00:21:59,404
for the objects that need to be
refreshed and only object need to be

362
00:21:59,899 --> 00:22:00,610
refreshed

363
00:22:00,061 --> 00:22:04,070
minority status checks that kinda thing
that's just a few other things that

364
00:22:04,007 --> 00:22:08,031
people talked about over the years if
you're gonna do

365
00:22:08,094 --> 00:22:11,094
and a synchronous request you one model
it pretty much on what we've done

366
00:22:11,094 --> 00:22:14,813
in this a second special quotes return a
future immediately

367
00:22:15,659 --> 00:22:19,695
message that future call black when they
request completes

368
00:22:20,019 --> 00:22:23,260
if you're going to be update in context
as a result

369
00:22:23,026 --> 00:22:28,073
whatever you do a synchronously remember
to use perform blocked a pic context

370
00:22:28,073 --> 00:22:32,602
because that will make sure that only
your on

371
00:22:33,259 --> 00:22:36,267
only your request updates are happening
in context at any one time

372
00:22:37,059 --> 00:22:41,330
will make should stay the same as
impatient yes this does mean that

373
00:22:41,033 --> 00:22:45,002
if you're going to be a forty year on a
quest types than your contacts must be

374
00:22:45,299 --> 00:22:48,590
using either the Private sheep currency
type for the make you can print side

375
00:22:48,059 --> 00:22:51,518
which brings us to

376
00:22:52,049 --> 00:22:56,097
concurrency at this point I'm gonna take
a little bit

377
00:22:56,529 --> 00:22:59,990
a a winding path to get to our new stuff

378
00:22:59,099 --> 00:23:03,518
and her to retrospective the evolving
core data concurrency story over the

379
00:23:04,409 --> 00:23:04,461
years

380
00:23:04,929 --> 00:23:09,002
wanna do this well it has changed a
number of times and well

381
00:23:09,659 --> 00:23:12,673
if you go out and hit up your favorite
search engine

382
00:23:12,799 --> 00:23:15,860
up to golan your somebody for example

383
00:23:16,409 --> 00:23:19,474
or I'll say and say okay tell me how to
record a concurrency

384
00:23:20,059 --> 00:23:23,510
you know I def responses and this is her
intended to help you filter through

385
00:23:23,051 --> 00:23:26,107
those and figure out you know what
really is the best current advice

386
00:23:27,007 --> 00:23:31,996
and I'll talk about you now also the new
state of affairs

387
00:23:32,059 --> 00:23:36,130
so making sense what you see on Stack
Overflow

388
00:23:36,769 --> 00:23:40,840
in the beginning and has managed object
context and as persistent store

389
00:23:40,084 --> 00:23:43,153
coordinator in from a DNS walking
protocol

390
00:23:43,909 --> 00:23:46,950
and what this meant was that before a
developer

391
00:23:46,095 --> 00:23:49,133
started accessing the managed object
context and that included

392
00:23:50,033 --> 00:23:53,732
things like accessing properties on its
managed object created by that

393
00:23:54,029 --> 00:23:58,090
object context developer had to walk the
context

394
00:23:58,639 --> 00:24:01,706
they want it messes a persistent store
coordinator they needed to manually

395
00:24:02,309 --> 00:24:05,350
lock store coordinator for them

396
00:24:05,035 --> 00:24:08,054
set whatever message they wanted and you
know

397
00:24:08,369 --> 00:24:11,400
because this will a locking protocol
they're also gonna need unlock

398
00:24:11,679 --> 00:24:16,717
after they're done the context report
respectively

399
00:24:17,059 --> 00:24:20,250
this kinda works like this you've got a
context it has an object in a

400
00:24:20,025 --> 00:24:23,914
you want to do something you walk the
context

401
00:24:24,139 --> 00:24:28,210
you make your at it maybe more than one

402
00:24:28,021 --> 00:24:32,096
saver unlock and things go away

403
00:24:32,096 --> 00:24:35,435
this actually has a couple problems with
that them the biggest

404
00:24:36,299 --> 00:24:39,600
which is that it's easy to forget the
locker unlocked well

405
00:24:39,006 --> 00:24:42,175
forgets probably the wrong word
occasionally something with throw

406
00:24:42,769 --> 00:24:46,990
you fed great at that predicate yes to
all generators through

407
00:24:46,099 --> 00:24:49,185
exception went straight up narcotics
locked

408
00:24:50,085 --> 00:24:53,126
on that can that state of affairs cuz

409
00:24:54,026 --> 00:24:57,575
anything you trying to now gonna
deadlock

410
00:24:57,809 --> 00:25:01,830
of a tricky doing some UI programming
because a lot of the binding stuff for

411
00:25:02,019 --> 00:25:04,080
example doesn't really have a place you
can hook in

412
00:25:04,629 --> 00:25:08,470
a lock or unlock as you attempt to
populate your table

413
00:25:08,047 --> 00:25:11,886
cell that really wasn't a satisfying
answer and we moved on

414
00:25:12,309 --> 00:25:17,250
to thread confine is heard about the
first step of our evolution towards you

415
00:25:17,025 --> 00:25:17,097
now

416
00:25:17,097 --> 00:25:20,120
more interesting and robust answer how
to do

417
00:25:21,002 --> 00:25:24,016
currency in CoreData enter confinement
is

418
00:25:24,034 --> 00:25:28,583
space for stepping back and saying OK
wire developers trying to

419
00:25:28,889 --> 00:25:31,927
you now at the same contacts and turned
out there weren't actually a lot a

420
00:25:32,269 --> 00:25:34,010
really great reasons for that

421
00:25:34,001 --> 00:25:37,020
Joe Kay study that

422
00:25:37,029 --> 00:25:40,107
managed object context should only be
edited from a single threat

423
00:25:40,809 --> 00:25:43,830
on developers making sure responsible
for making sure that

424
00:25:44,019 --> 00:25:47,032
only one thread ever uses managed object
context

425
00:25:47,149 --> 00:25:50,248
and at this point a lot of us learned
about things like thread local variables

426
00:25:51,139 --> 00:25:54,192
because that was for the easiest way to
associate

427
00:25:54,669 --> 00:25:57,704
context with the thread and make sure
that no other context ever had access to

428
00:25:58,019 --> 00:25:59,033
it

429
00:25:59,159 --> 00:26:02,210
and this model the developer still had
to walk

430
00:26:02,021 --> 00:26:05,023
coordinator further used and the skull
like this

431
00:26:05,023 --> 00:26:09,075
had a thread that threat had a context
that contact had objects

432
00:26:09,075 --> 00:26:12,084
you could edit the objects the context
as much as you want no

433
00:26:12,084 --> 00:26:15,175
you don't have to walk and

434
00:26:16,075 --> 00:26:20,077
sort of because people do want to do
things in parallel

435
00:26:20,095 --> 00:26:24,110
if you wanted to actually make changes
to you now other objects would set up

436
00:26:25,001 --> 00:26:28,560
a separate thread that had its own
context she wanted past data back and

437
00:26:28,659 --> 00:26:29,684
forth between these

438
00:26:29,909 --> 00:26:33,200
you generally do it by well how to
manage object ID's

439
00:26:33,002 --> 00:26:37,821
back and forth and having the context
for fresh data from the store

440
00:26:38,019 --> 00:26:41,019
this is kinda awkward on

441
00:26:41,019 --> 00:26:44,480
stole a bit difficult to get right I
mean it involved you know

442
00:26:44,048 --> 00:26:47,677
making sure that you didn't accidentally
message thread a context from another

443
00:26:48,109 --> 00:26:48,162
thread

444
00:26:48,639 --> 00:26:52,706
fire falls on another thread so

445
00:26:53,309 --> 00:26:56,317
wanted to make working with the context
easier

446
00:26:56,389 --> 00:27:00,200
and about this time another group but
Apple was inventing a really cool

447
00:27:00,002 --> 00:27:03,055
technology or technology we at least
thought was really cool

448
00:27:03,073 --> 00:27:07,212
you're probably familiar with it called
GCD or the dispatch if you're working at

449
00:27:07,869 --> 00:27:09,010
the sailor

450
00:27:09,001 --> 00:27:12,540
we look at this and we said you guys

451
00:27:12,549 --> 00:27:16,720
are solving this huge problem that we
have we like you

452
00:27:16,072 --> 00:27:20,191
on and in this case the concept context
encapsulates

453
00:27:20,839 --> 00:27:23,940
the threading model basically each
context got

454
00:27:23,094 --> 00:27:26,183
its very own cue and that Q is the only
thing that whatever access the internal

455
00:27:27,083 --> 00:27:28,177
say that managed object context

456
00:27:29,077 --> 00:27:33,206
his call the actor pattern for those her
familiar patterns

457
00:27:33,899 --> 00:27:37,230
there if you can't gurantee types who
set up private you compare it to type

458
00:27:37,023 --> 00:27:37,852
which says

459
00:27:38,059 --> 00:27:41,146
this context has its own private you and
everything should happen there

460
00:27:41,929 --> 00:27:45,004
a main thread contract to type which was
used for operating

461
00:27:45,679 --> 00:27:49,500
primarily from the UI on because
accurate as we all know

462
00:27:49,005 --> 00:27:52,054
likes to run a main thread

463
00:27:52,549 --> 00:27:56,210
especially said that as long as
whatever's happening tapping on main

464
00:27:56,021 --> 00:27:56,490
thread

465
00:27:56,679 --> 00:27:59,717
you can message manjaca context as much
as you want

466
00:28:00,059 --> 00:28:04,093
we also had the concurrency thread
confinement I've on

467
00:28:04,399 --> 00:28:07,422
well that said I'm gonna I got legacy
code and i wanna

468
00:28:07,629 --> 00:28:11,760
continue using that legacy code in the
same way that I have

469
00:28:11,076 --> 00:28:14,115
had it working for however many releases
I don't want to have to rewrite my

470
00:28:14,799 --> 00:28:15,886
application

471
00:28:16,669 --> 00:28:19,750
under this model when you wanted to do
something for managed object context

472
00:28:19,075 --> 00:28:20,724
would pass it

473
00:28:21,399 --> 00:28:24,452
a block tell it form blocker for walkin
white

474
00:28:24,929 --> 00:28:29,002
Miss Molly also no longer had lock
Courtney before use

475
00:28:29,659 --> 00:28:32,733
credit that slide that's just a contract
to text talked about

476
00:28:33,399 --> 00:28:36,470
mean private fine and this can invert

477
00:28:37,109 --> 00:28:42,720
the previous order we go from having a
thread that has a managed object context

478
00:28:42,072 --> 00:28:45,097
to a managed object context that has a
cue

479
00:28:45,097 --> 00:28:49,976
and any thread can create to work lot
and dispatch

480
00:28:50,849 --> 00:28:53,931
that block over the queue for processing
heard the context for processing

481
00:28:54,669 --> 00:28:57,762
the prime context will do whatever it
wants to update all its internal stay

482
00:28:58,599 --> 00:29:02,606
and then return returned to the calling
thread this actually made things and

483
00:29:02,669 --> 00:29:04,480
what meter a lot cleaner it was

484
00:29:04,048 --> 00:29:07,957
much easier to talk to the context and
get it doing things right

485
00:29:08,389 --> 00:29:12,412
home and at this point we had bonding
mechanism

486
00:29:12,619 --> 00:29:17,970
it was default you watched replication
com apopka create a contract to debug 1

487
00:29:17,097 --> 00:29:20,916
we would be very very picky about how
you message threads and we would

488
00:29:21,789 --> 00:29:25,830
very very vocally let you know if you
had done something wrong

489
00:29:25,083 --> 00:29:28,602
thus require downloading a debug version
framework on

490
00:29:29,349 --> 00:29:32,960
from ABC it was is that the Dr these
days

491
00:29:32,096 --> 00:29:36,565
mom have one problem which is that it
often but still because it's

492
00:29:37,429 --> 00:29:40,448
hard to push develop frameworks through
that mechanism at the same time we push

493
00:29:40,619 --> 00:29:43,720
OS updates and it wasn't available on
I'll ask this now

494
00:29:43,072 --> 00:29:47,221
I austin I don't on the firm's
frameworks

495
00:29:47,869 --> 00:29:51,500
celebrities us to today

496
00:29:51,005 --> 00:29:54,844
well the story at the context level is
exactly the same

497
00:29:55,339 --> 00:29:58,368
context is still an actor styles cue

498
00:29:58,629 --> 00:30:02,960
still have charity types so has the same
thing for two types

499
00:30:02,096 --> 00:30:08,925
on you still message it using perform
block before walking away

500
00:30:09,789 --> 00:30:12,853
we've also added for Wat from walking
away API

501
00:30:13,429 --> 00:30:16,700
to as peace in Stourport matter this is
mostly relevant

502
00:30:16,007 --> 00:30:19,976
those view her subclassing in its first
store coordinator should now be using

503
00:30:20,669 --> 00:30:25,669
these methods which is what our existing
methods do they'll wrap party fun

504
00:30:25,669 --> 00:30:29,490
mock my restore coordinator though
because

505
00:30:29,049 --> 00:30:32,100
it doesn't actually need to message
directly by Hackett

506
00:30:33,000 --> 00:30:37,082
always uses its own private kill

507
00:30:37,082 --> 00:30:40,801
debugging default is now available
everywhere

508
00:30:41,539 --> 00:30:45,575
as a seventy

509
00:30:45,899 --> 00:30:49,580
as I V 70 and I was H if you want your
apt with

510
00:30:49,058 --> 00:30:52,277
combat apple core data that concurrency
debug1:

511
00:30:52,799 --> 00:30:56,500
we will be very very picky about how you
do concurrency we will let you know if

512
00:30:56,005 --> 00:30:57,062
you have done something wrong

513
00:30:58,007 --> 00:31:02,736
and this is about one hour as well no
special debug version of the free market

514
00:31:02,799 --> 00:31:05,805
necessary

515
00:31:05,859 --> 00:31:09,200
looking ahead this is in the sorta
predictions not process because making

516
00:31:09,002 --> 00:31:09,711
promises

517
00:31:09,909 --> 00:31:13,730
way above my pay grade and Esther
confinement is pretty much

518
00:31:13,073 --> 00:31:16,492
actually on that includes the
confinement currently tied

519
00:31:17,149 --> 00:31:21,080
we saw earlier with the sickness
fetching that he just can't be supported

520
00:31:21,008 --> 00:31:25,967
in a confinement her tomorrow so as we
move forward it's likely the one more

521
00:31:26,039 --> 00:31:27,210
kinds of changes

522
00:31:27,021 --> 00:31:30,096
also only works for context that are
using you the private you or make you

523
00:31:30,096 --> 00:31:32,171
can't gurantee types

524
00:31:33,071 --> 00:31:36,740
as bonus API make that go down a little
easier because debugging is hard enough

525
00:31:37,379 --> 00:31:38,220
already

526
00:31:38,022 --> 00:31:41,841
we've added a name property Fernandes
managed object context

527
00:31:42,039 --> 00:31:45,330
and person Stourport Manor it only
applies if

528
00:31:45,033 --> 00:31:49,045
your actor is using the Justin the
privates you can't gurantee type

529
00:31:49,045 --> 00:31:52,994
if you do said in a modern context or
your coordinator

530
00:31:53,399 --> 00:31:57,000
this will be used displayed lol DB and
Xcode

531
00:31:57,000 --> 00:31:59,094
when you're debugging she'll be able to
see which queues are actually associated

532
00:31:59,094 --> 00:32:00,108
with which

533
00:32:01,008 --> 00:32:05,777
which managed object context in your

534
00:32:05,849 --> 00:32:10,370
application

535
00:32:10,037 --> 00:32:14,081
on Tyco out sexual gonna be a fairly
short session cuz must have what you

536
00:32:14,081 --> 00:32:15,170
need to know is encapsulated on the
slide

537
00:32:16,007 --> 00:32:19,018
internally I'm sorry or

538
00:32:19,081 --> 00:32:22,110
at present at the conference a former
teacher you've heard some buzz about you

539
00:32:23,001 --> 00:32:23,040
know

540
00:32:23,049 --> 00:32:26,143
changed I clout we are transitioning to
new infrastructure

541
00:32:27,043 --> 00:32:30,082
you should see some reliability
improvements in to performance

542
00:32:30,082 --> 00:32:32,175
improvements for those of you who are
using the court I don't like that stuff

543
00:32:33,075 --> 00:32:37,114
but all the changes should be completely
transparent to developers

544
00:32:38,014 --> 00:32:43,017
if you're using the patterns that neck
and then showed you last year in their

545
00:32:43,044 --> 00:32:43,127
presentation

546
00:32:44,027 --> 00:32:47,065
nothing has changed application

547
00:32:47,065 --> 00:32:51,158
completely completely everything will
migrate over

548
00:32:52,058 --> 00:32:55,146
just transparently everything should
work it should just be more reliable and

549
00:32:56,046 --> 00:32:56,111
faster

550
00:32:57,011 --> 00:33:04,011
I do wanna talk about cloud kit since
that sort of a new one

551
00:33:05,019 --> 00:33:08,036
related technology that might be of some
interest you but in order to do that I

552
00:33:08,036 --> 00:33:08,043
sorta wanna

553
00:33:09,006 --> 00:33:12,006
assess the the full scope of the

554
00:33:12,006 --> 00:33:15,093
i cud related technologies up on certain
using context to decide if it really

555
00:33:15,093 --> 00:33:16,098
make sense for your application

556
00:33:17,043 --> 00:33:21,050
they should a technology is the key
value star

557
00:33:21,005 --> 00:33:24,093
says allows you to store small out today
to on an application by application

558
00:33:25,038 --> 00:33:25,102
basis

559
00:33:26,002 --> 00:33:29,008
great for things like preferences sorry
you know

560
00:33:29,008 --> 00:33:32,095
do you stay that kind of thing a
synchronously kept up to date

561
00:33:32,095 --> 00:33:35,112
and it has in Daytona constraints only
allows you small

562
00:33:36,012 --> 00:33:42,035
Ste store a small amount of data as i
cud documents

563
00:33:42,035 --> 00:33:45,038
since approach million viewers about you
who in from a document based

564
00:33:45,065 --> 00:33:45,157
applications

565
00:33:46,057 --> 00:33:49,082
fairly simple API basically replace

566
00:33:49,082 --> 00:33:52,173
all whatever is in the cloud with
whatever I have just created

567
00:33:53,073 --> 00:33:56,129
on Mac OS 10 is greedy and automatically

568
00:33:57,029 --> 00:34:00,114
download everything that's in the clouds
you gotta whole of Lancashire volunteer

569
00:34:01,014 --> 00:34:01,095
documents

570
00:34:01,095 --> 00:34:04,150
is good for instructor unstructured data
and is tied filesystem

571
00:34:05,005 --> 00:34:08,007
has good if you want to replace
everything on

572
00:34:08,052 --> 00:34:11,121
all your devices with whatever the
latest greatest state

573
00:34:12,021 --> 00:34:15,113
from one device no we can't I club
called it a

574
00:34:16,013 --> 00:34:19,110
this is good for when you want to merge
data that is

575
00:34:20,001 --> 00:34:23,053
created across multiple devices instead
of replacing

576
00:34:23,062 --> 00:34:27,089
add a contact on machine one you want
that to be added to your global cloud

577
00:34:27,089 --> 00:34:28,182
data store you don't want to replace

578
00:34:29,082 --> 00:34:33,083
your I dislike use key private data

579
00:34:33,092 --> 00:34:36,110
user data structure data in sync

580
00:34:37,001 --> 00:34:40,008
across multiple devices and its
replicated between all your devices

581
00:34:40,008 --> 00:34:43,056
but his single user data which brings us
to cloud get

582
00:34:44,028 --> 00:34:47,060
club kid is the new API

583
00:34:47,006 --> 00:34:50,014
and somebody and I say client-server
model

584
00:34:51,004 --> 00:34:54,043
which means it has no local store its if
your gonna be using it you

585
00:34:54,079 --> 00:34:57,081
users are going to need to be connected
to the network at all times

586
00:34:57,099 --> 00:35:00,192
and last reported a square East not
before power

587
00:35:01,092 --> 00:35:05,104
Chordata gives you but her really
substantial and pretty much everything

588
00:35:06,004 --> 00:35:06,041
your

589
00:35:06,041 --> 00:35:09,048
reason we're gonna want to jail and its
application center data

590
00:35:10,011 --> 00:35:14,019
what does that mean well the data is
public and shared by all users of your

591
00:35:14,019 --> 00:35:14,100
application

592
00:35:15,000 --> 00:35:18,055
or can be if you wanna implement a there
now

593
00:35:18,055 --> 00:35:21,070
restaurant reviewing application where
are all here

594
00:35:21,007 --> 00:35:25,007
users can see what everybody else
thought they were given restaurant this

595
00:35:25,007 --> 00:35:26,078
is probably technology one look at

596
00:35:27,041 --> 00:35:31,099
it restructured structured in both data
and it allows for large dataset dataset

597
00:35:31,099 --> 00:35:35,108
scale fortunately with the number users
of your application

598
00:35:36,089 --> 00:35:39,188
use iPod account and has client directed

599
00:35:40,088 --> 00:35:43,172
data transfer and I don't know either
those means he should probably go

600
00:35:44,072 --> 00:35:47,133
watch the video of their session
somebody gave me the slides

601
00:35:48,033 --> 00:35:53,077
and asked me please talk about party
that's about it mom

602
00:35:53,077 --> 00:35:56,151
so that's the I cloud on

603
00:35:57,051 --> 00:35:59,113
alternatives that you have on our
platform some you may want to actually

604
00:36:00,013 --> 00:36:01,042
go look at Club get

605
00:36:01,042 --> 00:36:05,064
and you now do interesting things with
that which brings us to the session I'm

606
00:36:05,064 --> 00:36:06,071
sure all you have

607
00:36:06,071 --> 00:36:10,113
wondered about since monday's
announcement which is

608
00:36:11,013 --> 00:36:18,013
swift you have questions and I'm here to
give you answers

609
00:36:19,003 --> 00:36:22,015
this is a fragment from an email that
came through one of my mailbox is

610
00:36:22,042 --> 00:36:26,089
sometime over the last several months
basically says

611
00:36:26,089 --> 00:36:29,151
well dress the message basically said

612
00:36:30,051 --> 00:36:34,150
Swift is intended as a language for Cup
programmers

613
00:36:34,609 --> 00:36:37,710
cocoa is nice and powerful and dynamic

614
00:36:37,071 --> 00:36:40,080
core data is a very dynamic and very
powerful piece

615
00:36:40,008 --> 00:36:44,079
Coco well swift must support coretta

616
00:36:45,051 --> 00:36:49,380
period to adults

617
00:36:49,839 --> 00:36:52,913
you get the full power Chordata in swept

618
00:36:53,579 --> 00:36:57,633
you can create managed object subclasses

619
00:36:58,119 --> 00:37:02,380
in swept show you how to do that
backslide and make sense for your

620
00:37:02,038 --> 00:37:02,046
application

621
00:37:03,018 --> 00:37:06,117
you can mix and match between Chordata
and swift files

622
00:37:07,017 --> 00:37:11,020
all same story is they've been telling
you in all the others were sessions with

623
00:37:11,047 --> 00:37:11,105
what

624
00:37:12,005 --> 00:37:15,017
how do you create

625
00:37:15,017 --> 00:37:19,095
man judge subclass well they're pretty
much like objective-c only instead of

626
00:37:19,095 --> 00:37:20,124
using at dynamic

627
00:37:21,024 --> 00:37:24,025
you'll be using on at and is managed

628
00:37:24,025 --> 00:37:27,114
this is a corner desks for property the
12th

629
00:37:27,339 --> 00:37:32,010
swift compiler that acquitted a runtime
is gonna be responsible for managing the

630
00:37:32,001 --> 00:37:32,100
data storage

631
00:37:33,000 --> 00:37:40,000
hands accessors for properties that you
specify that managed unfortunately not

632
00:37:40,001 --> 00:37:40,098
gonna be able to

633
00:37:40,098 --> 00:37:43,197
you now create your own then

634
00:37:44,097 --> 00:37:47,140
mechanisms facts are facts about that
one

635
00:37:48,004 --> 00:37:51,033
change other than this to you you'll
need to remember that my trip if you

636
00:37:51,069 --> 00:37:53,105
view up is that you now need to add the
model name

637
00:37:54,005 --> 00:37:57,046
in the data model when you specify the

638
00:37:57,046 --> 00:38:01,064
class that your HD is gonna be using and
that's just done

639
00:38:01,064 --> 00:38:06,043
appear in their modeling tool where you
specify the class 9 you didn't specify

640
00:38:06,619 --> 00:38:07,280
the

641
00:38:07,028 --> 00:38:10,055
arm fully qualified class namespace

642
00:38:10,055 --> 00:38:13,344
stock last night but that's really the
only change

643
00:38:13,839 --> 00:38:19,650
this is one object to C Class A plus
looks like you should mostly be familiar

644
00:38:19,065 --> 00:38:19,092
for

645
00:38:19,092 --> 00:38:22,166
with this if you're in a session on
import Chordata

646
00:38:23,066 --> 00:38:26,141
query interface acquired properties
you're done

647
00:38:27,041 --> 00:38:30,116
but we've also got a separate file and
this file was actually pretty basic

648
00:38:31,016 --> 00:38:31,465
working

649
00:38:31,609 --> 00:38:34,684
important header file as well that
actually works Claire

650
00:38:35,359 --> 00:38:39,000
where you're from station to clear that
put it is responsible for these

651
00:38:39,000 --> 00:38:39,074
properties

652
00:38:39,074 --> 00:38:42,172
and you're done switched classes both
the youths into a single file

653
00:38:43,072 --> 00:38:46,421
looks a lot like that mom small sleek

654
00:38:47,069 --> 00:38:50,072
contains all the same information that
you saw in the previous two files

655
00:38:50,369 --> 00:38:53,390
in one place without you notification

656
00:38:53,579 --> 00:38:58,540
lines stinks remember about swift is

657
00:38:58,054 --> 00:39:02,593
that on uses types it's very very

658
00:39:03,079 --> 00:39:06,880
firm in the belief that static typing is
a good important thing

659
00:39:06,088 --> 00:39:09,142
credited has not does not use types

660
00:39:10,042 --> 00:39:13,961
but if you want to use types and you
probably will in your swift code

661
00:39:14,339 --> 00:39:18,270
arm priority creating your own

662
00:39:18,027 --> 00:39:21,031
and and this managed object subclasses
custom subclasses

663
00:39:21,067 --> 00:39:24,072
see can use that's a plus names typename
otherwise you're gonna have to use

664
00:39:25,017 --> 00:39:26,103
minute Ennis managed object because

665
00:39:27,003 --> 00:39:30,082
entity names are not going to suffices
type specifiers

666
00:39:30,109 --> 00:39:33,500
that's correct I don't like this

667
00:39:33,005 --> 00:39:36,010
should be what you pretty much expect
having

668
00:39:37,000 --> 00:39:41,055
had a chance with his left and nominated
demo

669
00:39:41,055 --> 00:39:45,091
talk about how

670
00:39:45,091 --> 00:39:49,100
things work and swept so here we have

671
00:39:50,000 --> 00:39:54,079
a swift application or work project

672
00:39:54,079 --> 00:39:57,648
that builds an application that looks
awfully like the last thing

673
00:39:58,359 --> 00:40:01,710
i download got an app delegate

674
00:40:01,071 --> 00:40:06,680
all a few standard code sets up

675
00:40:07,319 --> 00:40:12,890
I V outlets for your controllers at key
value observers see you notice when

676
00:40:12,089 --> 00:40:15,103
things have changed you can refresh
content controllers

677
00:40:16,003 --> 00:40:20,018
got back just a code

678
00:40:20,018 --> 00:40:25,055
to run batch updates all the same stuff
you'd expect

679
00:40:25,055 --> 00:40:28,844
got utilities class and I've actually
split

680
00:40:29,339 --> 00:40:33,700
Mike order to stack set up into you of
into utilities

681
00:40:33,007 --> 00:40:37,055
nets to the way that Swift handles
variable initialization

682
00:40:38,018 --> 00:40:41,019
on either initially something to

683
00:40:41,028 --> 00:40:44,587
a simple type or

684
00:40:44,839 --> 00:40:47,864
set up computer property but he said a
computer property

685
00:40:48,089 --> 00:40:51,410
that gets reevaluated every time
somebody accesses the property

686
00:40:51,041 --> 00:40:54,075
is not what you want setting up
according to stack

687
00:40:54,075 --> 00:40:57,414
what access at once on

688
00:40:58,089 --> 00:41:01,520
I was playing around as I built this see
can see we've got

689
00:41:01,052 --> 00:41:04,128
a lazy property setting up Matt binding
deferring binding the managed object

690
00:41:05,028 --> 00:41:06,071
models

691
00:41:06,071 --> 00:41:09,119
data until you actually try accessor

692
00:41:10,019 --> 00:41:13,041
computer property for persistent store
coordinator

693
00:41:13,041 --> 00:41:17,119
set up my staff be properties can deal
with no at least he is not happy with

694
00:41:18,019 --> 00:41:19,044
Nelson is another

695
00:41:19,044 --> 00:41:23,070
minor gotcha there on

696
00:41:23,007 --> 00:41:26,039
you're in better function that set up in
returns

697
00:41:27,002 --> 00:41:30,074
I managed object context it look the
familiar

698
00:41:30,074 --> 00:41:36,095
to those view personally with Chordata
all nations calls it the same

699
00:41:36,095 --> 00:41:41,124
mailbox who've got my message instance
which has

700
00:41:42,024 --> 00:41:45,048
Kb observer setup

701
00:41:45,048 --> 00:41:48,071
set it up in the net ne third

702
00:41:48,071 --> 00:41:52,950
whenever the observer gets triggered
will update I read bob's

703
00:41:53,589 --> 00:41:57,500
messages controller does the same thing
the previous matches controller did

704
00:41:57,005 --> 00:42:00,874
I'm gonna build and run

705
00:42:01,369 --> 00:42:05,690
well its worst application

706
00:42:05,069 --> 00:42:08,095
using Core Data

707
00:42:08,095 --> 00:42:15,095
that actually lower faster from the
objective-c version

708
00:42:17,077 --> 00:42:22,119
so yeah and if I come up here

709
00:42:23,019 --> 00:42:26,044
Mark as Read will

710
00:42:26,044 --> 00:42:29,713
thread so I talked about that updates

711
00:42:30,109 --> 00:42:32,780
talk about it even fetching an
incremental stores and what that means

712
00:42:32,078 --> 00:42:34,157
for you

713
00:42:34,859 --> 00:42:37,908
talked about occurred to changes
American currency story over the years

714
00:42:38,349 --> 00:42:42,373
if you're sensitive you know where we
were where we wanted to be

715
00:42:42,589 --> 00:42:46,670
I caught up they touch but West covered
everything

716
00:42:46,067 --> 00:42:50,128
3 get see Anthony the alligator tonya
file a bug

717
00:42:51,028 --> 00:42:53,837
we can't fix what we don't know about we
don't care to affect what we do know

718
00:42:54,089 --> 00:42:55,510
about

719
00:42:55,051 --> 00:42:58,092
but you know we can't fix what we don't
know about

720
00:42:58,092 --> 00:43:01,171
file a bug report on helps if you give
us steps to reproduce:

721
00:43:02,071 --> 00:43:05,960
really helps if you got a nap give us an
app that replaces your problem

722
00:43:06,599 --> 00:43:10,520
well we fix those first casino we know
what sex

723
00:43:10,052 --> 00:43:13,052
is it too if you want feature requests

724
00:43:13,052 --> 00:43:16,371
and have her quest for in tissues
documentation stuff others to bug

725
00:43:16,839 --> 00:43:20,230
reporter

726
00:43:20,023 --> 00:43:23,104
more information you can talk to David
along he's our technology evangelist

727
00:43:24,004 --> 00:43:27,067
on apple.com or consented send

728
00:43:27,067 --> 00:43:30,113
whatever your feedback is take a coffee
back at Apple dot com

729
00:43:31,013 --> 00:43:34,042
we have a lot of documentation online at
developer website

730
00:43:34,042 --> 00:43:37,096
there's a programming guides examples
tutorials code fragments that kind of

731
00:43:37,096 --> 00:43:37,181
thing

732
00:43:38,081 --> 00:43:42,150
and there's always the Apple could
developer forums

733
00:43:43,005 --> 00:43:46,074
when sessions I mentioned this there was
a coke its session

734
00:43:46,569 --> 00:43:50,500
interesting quirk it Tuesday at 3:15 if
you're interested in that you probably

735
00:43:50,005 --> 00:43:51,070
want to watch the video

736
00:43:52,015 --> 00:43:55,019
they're also although it is not
appearing on the slide was a what's new

737
00:43:55,019 --> 00:43:56,021
in Cocoa session

738
00:43:56,039 --> 00:43:59,045
on Tuesday may be interested in watching
that as well

739
00:43:59,099 --> 00:44:01,108
arm and welcome and thanks for coming

